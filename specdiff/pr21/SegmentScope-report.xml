<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><div class="flex-box"><div class="flex-content"> <main role="main"><div class="header"><div class="sub-title"> <span class="module-label-in-type">Module</span> <a href="../../../module-summary.html">java.base</a> </div><div class="sub-title"> <span class="package-label-in-type">Package</span> <a href="package-summary.html">java.lang.foreign</a> </div><h1 title="Interface SegmentScope" class="title">Interface SegmentScope </h1></div> <a start_ctx_id="class:SegmentScope"/> <section class="class-description" id="class-description"> <hr/><div class="type-signature"> <span class="modifiers">public sealed interface    </span><span class="element-name type-name-label">SegmentScope</span> </div><div class="preview-block" id="preview-java.lang.foreign.SegmentScope"> <span class="preview-label"><code>SegmentScope</code> is a preview API of the Java platform.        </span><div class="preview-comment"> Programs can only use <code>SegmentScope</code> when preview features are enabled.          </div><div class="preview-comment">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.                 </div> </div><div class="block"> A segment scope controls access to memory segments.<p> A memory segment can only be accessed while its scope is <a href="#isAlive()">alive</a>. Moreover, depending on how the segment scope has been obtained, access might additionally be <a href="Arena.html#thread-confinement">restricted to specific threads   </a>.                           </p><p> The simplest segment scope is the <a href="#global()">global scope </a>. The global scope is always alive. As a result, segments associated with the global scope are always accessible and their backing regions of memory are never deallocated. Moreover, memory segments associated with the global scope can be <a href="#isAccessibleBy(java.lang.Thread)">accessed</a> from any thread.                                                </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> MemorySegment segment = MemorySegment.allocateNative(100, SegmentScope.global());
 ...
 // segment is never deallocated!
</code>
                                </pre> </div><p> Alternatively, clients can obtain an <a href="#auto()">automatic scope </a>, that is a segment scope that is managed, automatically, by the garbage collector. The regions of memory backing memory segments associated with an automatic scope are deallocated at some unspecified time <em>after</em> they become <a href="../../../java/lang/ref/package.html#reachability">unreachable</a>, as shown below:                                            </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> MemorySegment segment = MemorySegment.allocateNative(100, SegmentScope.auto());
 ...
 segment = null; // the segment region becomes available for deallocation after this point
</code>
                                </pre> </div> Memory segments associated with an automatic scope can also be <a href="#isAccessibleBy(java.lang.Thread)">accessed</a> from any thread.<p> Finally, clients can obtain a segment scope from an existing <a href="Arena.html" title="interface in java.lang.foreign">arena</a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup>, the arena scope. The regions of memory backing memory segments associated with an arena scope are deallocated when the arena is <a href="Arena.html#close()">closed</a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup>. When this happens, the arena scope becomes not <a href="#isAlive()">alive</a> and subsequent access operations on segments associated with the arena scope will fail <a href="../IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>.                                                        </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java">MemorySegment segment = null;
try (Arena arena = Arena.openConfined()) {
    segment = MemorySegment.allocateNative(100, arena.scope());
    ...
} // segment region deallocated here
segment.get(ValueLayout.JAVA_BYTE, 0); // throws IllegalStateException
</code>
                                </pre> </div> Which threads can <a href="#isAccessibleBy(java.lang.Thread)"><code>access</code></a> memory segments associated with an arena scope depends on the arena kind. For instance, segments associated with the scope of a <a href="Arena.html#openConfined()">confined arena </a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup> can only be accessed by the thread that created the arena. Conversely, segments associated with the scope of <a href="Arena.html#openConfined()">shared arena </a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup> can be accessed by any thread.                                                                         </div><dl class="notes"> <dt>Implementation Requirements: </dt><dd>Implementations of this interface are thread-safe.     </dd> <dt>Since:</dt><dd>20</dd> <dt>See Also: </dt><dd><ul class="tag-list"><li> <a href="Arena.html" title="interface in java.lang.foreign"><code>Arena</code></a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup> </li><li> <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> </li></ul></dd>   </dl>   </section> <a end_ctx_id="class:SegmentScope"/> <section class="summary"><ul class="summary-list"><li> <section class="method-summary" id="method-summary"><h2>Method Summary </h2><div id="method-summary-table"><div class="table-tabs" role="tablist" aria-orientation="horizontal"> <button id="method-summary-table-tab0" role="tab" aria-selected="true" aria-controls="method-summary-table.tabpanel" tabindex="0" class="active-table-tab">All Methods </button><button id="method-summary-table-tab1" role="tab" aria-selected="false" aria-controls="method-summary-table.tabpanel" tabindex="-1" class="table-tab">Static Methods </button><button id="method-summary-table-tab2" role="tab" aria-selected="false" aria-controls="method-summary-table.tabpanel" tabindex="-1" class="table-tab">Instance Methods </button><button id="method-summary-table-tab3" role="tab" aria-selected="false" aria-controls="method-summary-table.tabpanel" tabindex="-1" class="table-tab">Abstract Methods </button> </div><div id="method-summary-table.tabpanel" role="tabpanel"><div class="summary-table three-column-summary" aria-labelledby="method-summary-table-tab0"><div class="table-header col-first">Modifier and Type  </div><div class="table-header col-second">Method</div><div class="table-header col-last">Description</div><div class="col-first even-row-color method-summary-table method-summary-table-tab1"> <code>static <a href="SegmentScope.html" title="interface in java.lang.foreign">SegmentScope</a><sup><a href="#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup> </code> </div><div class="col-second even-row-color method-summary-table method-summary-table-tab1"> <code><a href="#auto()" class="member-name-link">auto</a>()</code> </div><div class="col-last even-row-color method-summary-table method-summary-table-tab1"><div class="block">Creates a new scope that is managed, automatically, by the garbage collector.           </div></div><div class="col-first odd-row-color method-summary-table method-summary-table-tab1"> <code>static <a href="SegmentScope.html" title="interface in java.lang.foreign">SegmentScope</a><sup><a href="#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup> </code> </div><div class="col-second odd-row-color method-summary-table method-summary-table-tab1"> <code><a href="#global()" class="member-name-link">global</a>()</code> </div><div class="col-last odd-row-color method-summary-table method-summary-table-tab1"><div class="block">Obtains the global scope.   </div></div><div class="col-first even-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"> <code>boolean</code> </div><div class="col-second even-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"> <code><a href="#isAccessibleBy(java.lang.Thread)" class="member-name-link">isAccessibleBy</a> <wbr/> (<a href="../Thread.html" title="class in java.lang">Thread</a> thread)  </code> </div><div class="col-last even-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"><div class="block"> Returns <code>true</code> if the provided thread can access and/or associate segments with this scope.              </div></div><div class="col-first odd-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"> <code>boolean</code> </div><div class="col-second odd-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"> <code><a href="#isAlive()" class="member-name-link">isAlive</a>()</code> </div><div class="col-last odd-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"><div class="block"> Returns <code>true</code>, if this scope is alive.       </div></div><div class="col-first even-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"> <code>void</code> </div><div class="col-second even-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"> <code><a href="#whileAlive(java.lang.Runnable)" class="member-name-link">whileAlive</a> <wbr/> (<a href="../Runnable.html" title="interface in java.lang">Runnable</a> action)  </code> </div><div class="col-last even-row-color method-summary-table method-summary-table-tab2 method-summary-table-tab3"><div class="block">Runs a critical action while this scope is kept alive.         </div></div></div></div></div>  </section> </li></ul>  </section> <section class="details"><ul class="details-list"><li> <section class="method-details" id="method-detail"><h2>Method Details </h2><ul class="member-list"><li> <a start_ctx_id="method:auto()"/> <section class="detail" id="auto()"><h3>auto</h3><div class="member-signature"> <span class="modifiers">static</span> <span class="return-type"><a href="SegmentScope.html" title="interface in java.lang.foreign">SegmentScope</a><sup><a href="#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup></span> <span class="element-name">auto</span>() </div><div class="block"> Creates a new scope that is managed, automatically, by the garbage collector. Segments associated with the returned scope can be <a href="#isAccessibleBy(java.lang.Thread)">accessed</a> by any thread.                        </div><dl class="notes"> <dt>Returns:</dt><dd>a new scope that is managed, automatically, by the garbage collector.          </dd> </dl>  </section>  </li><li> <a end_ctx_id="method:auto()"/> <hr/> <a start_ctx_id="method:global()"/> <section class="detail" id="global()"><h3>global</h3><div class="member-signature"> <span class="modifiers">static</span> <span class="return-type"><a href="SegmentScope.html" title="interface in java.lang.foreign">SegmentScope</a><sup><a href="#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup></span> <span class="element-name">global</span>() </div><div class="block"> Obtains the global scope. Segments associated with the global scope can be <a href="#isAccessibleBy(java.lang.Thread)">accessed</a> by any thread.                </div><dl class="notes"> <dt>Returns:</dt><dd>the global scope.  </dd> </dl>  </section>    </li><li> <a end_ctx_id="method:global()"/> <hr/> <a start_ctx_id="method:isAlive()"/> <section class="detail" id="isAlive()"><h3>isAlive</h3><div class="member-signature"> <span class="return-type">boolean</span> <span class="element-name">isAlive</span>() </div><div class="block"> Returns <code>true</code>, if this scope is alive.       </div><dl class="notes"> <dt>Returns:</dt><dd> <code>true</code>, if this scope is alive      </dd> </dl>  </section>    </li><li> <a end_ctx_id="method:isAlive()"/> <hr/> <a start_ctx_id="method:isAccessibleBy(java.lang.Thread)"/> <section class="detail" id="isAccessibleBy(java.lang.Thread)"><h3>isAccessibleBy</h3><div class="member-signature"> <span class="return-type">boolean</span> <span class="element-name">isAccessibleBy</span> <wbr/> <span class="parameters">(<a href="../Thread.html" title="class in java.lang">Thread</a> thread)</span>   </div><div class="block"> Returns <code>true</code> if the provided thread can access and/or associate segments with this scope.              </div><dl class="notes"> <dt>Parameters:</dt><dd> <code>thread</code> - the thread to be tested.       </dd> <dt>Returns:</dt><dd> <code>true</code> if the provided thread can access and/or associate segments with this scope             </dd>  </dl>  </section>    </li><li> <a end_ctx_id="method:isAccessibleBy(java.lang.Thread)"/> <hr/> <a start_ctx_id="method:whileAlive(java.lang.Runnable)"/> <section class="detail" id="whileAlive(java.lang.Runnable)"><h3>whileAlive</h3><div class="member-signature"> <span class="return-type">void</span> <span class="element-name">whileAlive</span> <wbr/> <span class="parameters">(<a href="../Runnable.html" title="interface in java.lang">Runnable</a> action)</span>   </div><div class="block">Runs a critical action while this scope is kept alive.         </div><dl class="notes"> <dt>Parameters:</dt><dd> <code>action</code> - the action to be run.       </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this scope is not <a href="#isAlive()">alive</a>.        </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang">WrongThreadException</a></code> - if this method is called from a thread <code>T</code>, such that <code>isAccessibleBy(T) == false  </code>.              </dd>  </dl>  </section>    </li></ul>  </section> </li></ul>  </section> <a end_ctx_id="method:whileAlive(java.lang.Runnable)"/> <hr/>         </main> </div></div></diff></diffreport>