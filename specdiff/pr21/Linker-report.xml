<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Linker [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="class:Linker"/> <section class="class-description" id="class-description"> <hr/><div class="type-signature"> <span class="modifiers">public sealed interface    </span><span class="element-name type-name-label">Linker</span> </div><div class="preview-block" id="preview-java.lang.foreign.Linker"> <span class="preview-label"><code>Linker</code> is a preview API of the Java platform.        </span><div class="preview-comment"> Programs can only use <code>Linker</code> when preview features are enabled.          </div><div class="preview-comment">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.                 </div> </div><div class="block"> A linker provides access to foreign functions from Java code, and access to Java code from foreign functions.<p> Foreign functions typically reside in libraries that can be loaded on-demand. Each library conforms to a specific ABI (Application Binary Interface). An ABI is a set of calling conventions and data types associated with the compiler, OS, and processor where the library was built. For example, a C compiler on Linux/x64 usually builds libraries that conform to the SystemV ABI.                                                            </p><p> A linker has detailed knowledge of the calling conventions and data types used by a specific ABI. For any library which conforms to that ABI, the linker can mediate between Java code running in the JVM and foreign functions in the library. In particular:<ul><li> A linker allows Java code to link against foreign functions, via <a href="#downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">downcall method handles  </a>; and             </li><li> A linker allows foreign functions to call Java method handles, via the generation of <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)">upcall stubs </a>.               </li></ul> In addition, a linker provides a way to look up foreign functions in libraries that conform to the ABI. Each linker chooses a set of libraries that are commonly used on the OS and processor combination associated with the ABI. For example, a linker for Linux/x64 might choose two libraries: <code>libc</code> and <code>libm</code>. The functions in these libraries are exposed via a <a href="#defaultLookup()">symbol lookup </a>.                                                                                                           </p><p> The <a href="#nativeLinker()"><code>nativeLinker()</code></a> method provides a linker for the ABI associated with the OS and processor where the Java runtime is currently executing. This linker also provides access, via its <a href="#defaultLookup()">default lookup </a>, to the native libraries loaded with the Java runtime.                                       </p><h2 id="downcall-method-handles">Downcall method handles  </h2> <a href="#downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">Linking a foreign function   </a> is a process which requires a function descriptor, a set of memory layouts which, together, specify the signature of the foreign function to be linked, and returns, when complete, a downcall method handle, that is, a method handle that can be used to invoke the target foreign function.<p> The Java <a href="../invoke/MethodType.html" title="class in java.lang.invoke">method type </a> associated with the returned method handle is <a href="FunctionDescriptor.html#toMethodType()">derived</a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> from the argument and return layouts in the function descriptor. The downcall method handle type, might then be decorated by additional leading parameters, in the given order if both are present:<ul><li> If the downcall method handle is created <a href="#downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">without specifying a target address    </a>, the downcall method handle type features a leading parameter of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>, from which the address of the target foreign function can be derived.                                </li><li> If the function descriptor's return layout is a group layout, the resulting downcall method handle accepts an additional leading parameter of type <a href="SegmentAllocator.html" title="interface in java.lang.foreign"><code>SegmentAllocator</code></a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>, which is used by the linker runtime to allocate the memory region associated with the struct returned by the downcall method handle.                                             </li></ul>                                          </p><h2 id="upcall-stubs">Upcall stubs </h2> <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)">Creating an upcall stub   </a> requires a method handle and a function descriptor; in this case, the set of memory layouts in the function descriptor specify the signature of the function pointer associated with the upcall stub.<p> The type of the provided method handle's type has to match the method type associated with the upcall stub, which is <a href="FunctionDescriptor.html#toMethodType()">derived</a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> from the provided function descriptor.                           </p><p> Upcall stubs are modelled by instances of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>; upcall stubs can be passed by reference to other downcall method handles <span class="diff-html-removed">and,</span> <span class="diff-html-removed">they</span> <span class="diff-html-removed">are</span><span class="diff-html-added">.</span> <span class="diff-html-added">An</span> <span class="diff-html-added">upcall</span> <span class="diff-html-added">stub</span> <span class="diff-html-added">can</span> <span class="diff-html-added">be</span> released <span class="diff-html-removed">via</span> <span class="diff-html-removed">their</span> <span class="diff-html-removed">associated</span> <a href="SegmentScope.html" title="interface in java.lang.foreign" changeType="diff-removed-tag"><span class="diff-html-removed">scope</span></a><span class="diff-html-added">by</span> <a href="Arena.html#close()"><span class="diff-html-added">closing</span></a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup> <span class="diff-html-added">the</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">which</span> <span class="diff-html-added">was</span> <span class="diff-html-added">used</span> <span class="diff-html-added">to</span> <span class="diff-html-added">create</span> <span class="diff-html-added">it</span>.                                           </p><h2 id="safety">Safety considerations </h2> Creating a downcall method handle is intrinsically unsafe. A symbol in a foreign library does not, in general, contain enough signature information (e.g. arity and types of foreign function parameters). As a consequence, the linker runtime cannot validate linkage requests. When a client interacts with a downcall method handle obtained through an invalid linkage request (e.g. by specifying a function descriptor featuring too many argument layouts), the result of such interaction is unspecified and can lead to JVM crashes. On downcall handle invocation, the linker runtime guarantees the following for any argument <code>A</code> of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> whose corresponding layout is <a href="ValueLayout.html#ADDRESS"><code>ValueLayout.ADDRESS</code></a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup>:<ul><li> <code> <span class="diff-html-removed">The</span><span class="diff-html-added">A.</span>scope <span class="diff-html-removed">of</span> <code changeType="diff-removed-tag"><span class="diff-html-removed">A</span></code> <span class="diff-html-removed">is</span> <a href="SegmentScope.html#isAlive()" changeType="diff-removed-tag"><span class="diff-html-removed">alive</span></a><sup changeType="diff-removed-tag"><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-added">().isAlive()</span> <span class="diff-html-added">==</span> <span class="diff-html-added">true</span>       </code>. Otherwise, the invocation throws <a href="../IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>;      </li><li> The invocation occurs in a thread <code>T</code> such that <code>A<span class="diff-html-removed">.scope()</span>.isAccessibleBy(T) == true  </code>. Otherwise, the invocation throws <a href="../WrongThreadException.html" title="class in java.lang"><code>WrongThreadException</code></a>; and                </li><li> <code> <span class="diff-html-removed">The</span> <span class="diff-html-removed">scope</span> <span class="diff-html-removed">of</span>A   </code> is kept alive <span class="diff-html-added">during</span> <span class="diff-html-added">the</span> <span class="diff-html-added">invocation.</span> <span class="diff-html-added">For</span> <span class="diff-html-added">instance,</span> <span class="diff-html-added">if</span> <code><span class="diff-html-added">A</span></code> <span class="diff-html-added">has</span> <span class="diff-html-added">been</span> <span class="diff-html-added">obtained</span> <span class="diff-html-added">using</span> <span class="diff-html-added">a</span> <a href="Arena.html#ofConfined()"><span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> </a><sup><a href="Arena.html#preview-java.lang.foreign.Arena"><span class="diff-html-added">PREVIEW</span></a></sup><span class="diff-html-added">,</span> <span class="diff-html-added">any</span> <span class="diff-html-added">attempt</span> <span class="diff-html-added">to</span> <a href="Arena.html#close()"><span class="diff-html-added">close</span></a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup> <span class="diff-html-removed">during</span><span class="diff-html-added">the</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">while</span> the <span class="diff-html-removed">invocation</span><span class="diff-html-added">downcall</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle</span> <span class="diff-html-added">is</span> <span class="diff-html-added">executing</span> <span class="diff-html-added">will</span> <span class="diff-html-added">result</span> <span class="diff-html-added">in</span> <span class="diff-html-added">a</span> <a href="../IllegalStateException.html" title="class in java.lang"><code><span class="diff-html-added">IllegalStateException</span></code></a>.                                    </li></ul> A downcall method handle created from a function descriptor whose return layout is an <a href="ValueLayout.OfAddress.html" title="interface in java.lang.foreign">address layout </a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup> returns a native segment associated with <span class="diff-html-removed">theglobal</span><span class="diff-html-added">a</span> <span class="diff-html-added">fresh</span> scope <sup changeType="diff-removed-tag"><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-added">that</span> <span class="diff-html-added">is</span> <span class="diff-html-added">always</span> <span class="diff-html-added">alive</span>. Under normal conditions, the size of the returned segment is <code>0</code>. However, if the return <span class="diff-html-added">address</span> layout <span class="diff-html-removed">is</span> <span class="diff-html-removed">an</span> <a href="ValueLayout.OfAddress.html#asUnbounded()" changeType="diff-removed-tag"><span class="diff-html-removed">unbounded</span></a><span class="diff-html-added">has</span> <span class="diff-html-added">a</span> <a href="ValueLayout.OfAddress.html#targetLayout()"><span class="diff-html-added">ValueLayout.OfAddress.targetLayout()</span></a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup><code> <span class="diff-html-removed">address</span> <span class="diff-html-removed">layout</span><span class="diff-html-added">T</span>  </code>, then the size of the returned segment is <code changeType="diff-removed-tag"><span class="diff-html-removed">Long.MAX_VALUE</span></code><span class="diff-html-added">set</span> <span class="diff-html-added">to</span> <code><span class="diff-html-added">T.byteSize()</span></code>.<p> When creating upcall stubs the linker runtime validates the type of the target method handle against the provided function descriptor and report an error if any mismatch is detected. As for downcalls, JVM crashes might occur, if the foreign code casts the function pointer associated with an upcall stub to a type that is incompatible with the provided function descriptor. Moreover, if the target method handle associated with an upcall stub returns a <a href="MemorySegment.html" title="interface in java.lang.foreign">memory segment </a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>, clients must ensure that this address cannot become invalid after the upcall completes. This can lead to unspecified behavior, and even JVM crashes, since an upcall is typically executed in the context of a downcall method handle invocation.                                                                                                                </p><p> An upcall stub argument whose corresponding layout is an <a href="ValueLayout.OfAddress.html" title="interface in java.lang.foreign">address layout </a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup> is a native segment associated with <span class="diff-html-removed">theglobal</span><span class="diff-html-added">a</span> <span class="diff-html-added">fresh</span> scope <sup changeType="diff-removed-tag"><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-added">that</span> <span class="diff-html-added">is</span> <span class="diff-html-added">always</span> <span class="diff-html-added">alive</span>. Under normal conditions, the size of this segment argument is <code>0</code>. However, if the <span class="diff-html-added">address</span> layout <span class="diff-html-removed">associated</span> <span class="diff-html-removed">with</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">upcall</span> <span class="diff-html-removed">stub</span> <span class="diff-html-removed">argument</span> <span class="diff-html-removed">is</span> <span class="diff-html-removed">an</span> <a href="ValueLayout.OfAddress.html#asUnbounded()" changeType="diff-removed-tag"><span class="diff-html-removed">unbounded</span></a><span class="diff-html-added">has</span> <span class="diff-html-added">a</span> <a href="ValueLayout.OfAddress.html#targetLayout()"><span class="diff-html-added">ValueLayout.OfAddress.targetLayout()</span></a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup><code> <span class="diff-html-removed">address</span> <span class="diff-html-removed">layout</span><span class="diff-html-added">T</span>  </code>, then the size of the segment argument is <code changeType="diff-removed-tag"><span class="diff-html-removed">Long.MAX_VALUE</span></code><span class="diff-html-added">set</span> <span class="diff-html-added">to</span> <code><span class="diff-html-added">T.byteSize()</span></code>.                                                             </p>                                                                                                                                                                                                                                                                      </div><dl class="notes"> <dt>Implementation Requirements: </dt><dd> Implementations of this interface are immutable, thread-safe and <a href="../../../../java.base/java/lang/doc-files/ValueBased.html">value-based</a>.         </dd> <dt>Since:</dt><dd>19</dd>  </dl>   </section> <a end_ctx_id="class:Linker"/>   </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="class:Linker"/> <section class="class-description" id="class-description"> <hr/><div class="type-signature"> <span class="modifiers">public sealed interface    </span><span class="element-name type-name-label">Linker</span> </div><div class="preview-block" id="preview-java.lang.foreign.Linker"> <span class="preview-label"><code>Linker</code> is a preview API of the Java platform.        </span><div class="preview-comment"> Programs can only use <code>Linker</code> when preview features are enabled.          </div><div class="preview-comment">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.                 </div> </div><div class="block"> A linker provides access to foreign functions from Java code, and access to Java code from foreign functions.<p> Foreign functions typically reside in libraries that can be loaded on-demand. Each library conforms to a specific ABI (Application Binary Interface). An ABI is a set of calling conventions and data types associated with the compiler, OS, and processor where the library was built. For example, a C compiler on Linux/x64 usually builds libraries that conform to the SystemV ABI.                                                            </p><p> A linker has detailed knowledge of the calling conventions and data types used by a specific ABI. For any library which conforms to that ABI, the linker can mediate between Java code running in the JVM and foreign functions in the library. In particular:<ul><li> A linker allows Java code to link against foreign functions, via <a href="#downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">downcall method handles  </a>; and             </li><li> A linker allows foreign functions to call Java method handles, via the generation of <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.SegmentScope)">upcall stubs </a>.               </li></ul> In addition, a linker provides a way to look up foreign functions in libraries that conform to the ABI. Each linker chooses a set of libraries that are commonly used on the OS and processor combination associated with the ABI. For example, a linker for Linux/x64 might choose two libraries: <code>libc</code> and <code>libm</code>. The functions in these libraries are exposed via a <a href="#defaultLookup()">symbol lookup </a>.                                                                                                           </p><p> The <a href="#nativeLinker()"><code>nativeLinker()</code></a> method provides a linker for the ABI associated with the OS and processor where the Java runtime is currently executing. This linker also provides access, via its <a href="#defaultLookup()">default lookup </a>, to the native libraries loaded with the Java runtime.                                       </p><h2 id="downcall-method-handles">Downcall method handles  </h2> <a href="#downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">Linking a foreign function   </a> is a process which requires a function descriptor, a set of memory layouts which, together, specify the signature of the foreign function to be linked, and returns, when complete, a downcall method handle, that is, a method handle that can be used to invoke the target foreign function.<p> The Java <a href="../invoke/MethodType.html" title="class in java.lang.invoke">method type </a> associated with the returned method handle is <a href="FunctionDescriptor.html#toMethodType()">derived</a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> from the argument and return layouts in the function descriptor. The downcall method handle type, might then be decorated by additional leading parameters, in the given order if both are present:<ul><li> If the downcall method handle is created <a href="#downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">without specifying a target address    </a>, the downcall method handle type features a leading parameter of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>, from which the address of the target foreign function can be derived.                                </li><li> If the function descriptor's return layout is a group layout, the resulting downcall method handle accepts an additional leading parameter of type <a href="SegmentAllocator.html" title="interface in java.lang.foreign"><code>SegmentAllocator</code></a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>, which is used by the linker runtime to allocate the memory region associated with the struct returned by the downcall method handle.                                             </li></ul>                                          </p><h2 id="upcall-stubs">Upcall stubs </h2> <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.SegmentScope)">Creating an upcall stub   </a> requires a method handle and a function descriptor; in this case, the set of memory layouts in the function descriptor specify the signature of the function pointer associated with the upcall stub.<p> The type of the provided method handle's type has to match the method type associated with the upcall stub, which is <a href="FunctionDescriptor.html#toMethodType()">derived</a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> from the provided function descriptor.                           </p><p> Upcall stubs are modelled by instances of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>; upcall stubs can be passed by reference to other downcall method handles and, they are released via their associated <a href="SegmentScope.html" title="interface in java.lang.foreign" changeType="diff-removed-tag">scope</a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup>.                             </p><h2 id="safety">Safety considerations </h2> Creating a downcall method handle is intrinsically unsafe. A symbol in a foreign library does not, in general, contain enough signature information (e.g. arity and types of foreign function parameters). As a consequence, the linker runtime cannot validate linkage requests. When a client interacts with a downcall method handle obtained through an invalid linkage request (e.g. by specifying a function descriptor featuring too many argument layouts), the result of such interaction is unspecified and can lead to JVM crashes. On downcall handle invocation, the linker runtime guarantees the following for any argument <code>A</code> of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> whose corresponding layout is <a href="ValueLayout.html#ADDRESS"><code>ValueLayout.ADDRESS</code></a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup>:<ul><li> The scope of <code changeType="diff-removed-tag">A</code> is <a href="SegmentScope.html#isAlive()" changeType="diff-removed-tag">alive</a><sup changeType="diff-removed-tag"><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup>. Otherwise, the invocation throws <a href="../IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>;           </li><li> The invocation occurs in a thread <code>T</code> such that <code>A.scope().isAccessibleBy(T) == true  </code>. Otherwise, the invocation throws <a href="../WrongThreadException.html" title="class in java.lang"><code>WrongThreadException</code></a>; and                </li><li> The scope of <code>A</code> is <a href="SegmentScope.html#whileAlive(java.lang.Runnable)">kept alive </a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup> during the invocation.         </li></ul> A downcall method handle created from a function descriptor whose return layout is an <a href="ValueLayout.OfAddress.html" title="interface in java.lang.foreign">address layout </a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup> returns a native segment associated with the <a href="SegmentScope.html#global()">global scope </a><sup changeType="diff-removed-tag"><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup>. Under normal conditions, the size of the returned segment is <code>0</code>. However, if the return layout is an <a href="ValueLayout.OfAddress.html#asUnbounded()" changeType="diff-removed-tag">unbounded</a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup> address layout, then the size of the returned segment is <code changeType="diff-removed-tag">Long.MAX_VALUE</code>.<p> When creating upcall stubs the linker runtime validates the type of the target method handle against the provided function descriptor and report an error if any mismatch is detected. As for downcalls, JVM crashes might occur, if the foreign code casts the function pointer associated with an upcall stub to a type that is incompatible with the provided function descriptor. Moreover, if the target method handle associated with an upcall stub returns a <a href="MemorySegment.html" title="interface in java.lang.foreign">memory segment </a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>, clients must ensure that this address cannot become invalid after the upcall completes. This can lead to unspecified behavior, and even JVM crashes, since an upcall is typically executed in the context of a downcall method handle invocation.                                                                                                                </p><p> An upcall stub argument whose corresponding layout is an <a href="ValueLayout.OfAddress.html" title="interface in java.lang.foreign">address layout </a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup> is a native segment associated with the <a href="SegmentScope.html#global()">global scope </a><sup changeType="diff-removed-tag"><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup>. Under normal conditions, the size of this segment argument is <code>0</code>. However, if the layout associated with the upcall stub argument is an <a href="ValueLayout.OfAddress.html#asUnbounded()" changeType="diff-removed-tag">unbounded</a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup> address layout, then the size of the segment argument is <code changeType="diff-removed-tag">Long.MAX_VALUE</code>.                                                     </p>                                                                                                                                                                                                                                                              </div><dl class="notes"> <dt>Implementation Requirements: </dt><dd> Implementations of this interface are immutable, thread-safe and <a href="../../../../java.base/java/lang/doc-files/ValueBased.html">value-based</a>.         </dd> <dt>Since:</dt><dd>19</dd>  </dl>   </section> <a end_ctx_id="class:Linker"/>   </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="class:Linker"/> <section class="class-description" id="class-description"> <hr/><div class="type-signature"> <span class="modifiers">public sealed interface    </span><span class="element-name type-name-label">Linker</span> </div><div class="preview-block" id="preview-java.lang.foreign.Linker"> <span class="preview-label"><code>Linker</code> is a preview API of the Java platform.        </span><div class="preview-comment"> Programs can only use <code>Linker</code> when preview features are enabled.          </div><div class="preview-comment">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.                 </div> </div><div class="block"> A linker provides access to foreign functions from Java code, and access to Java code from foreign functions.<p> Foreign functions typically reside in libraries that can be loaded on-demand. Each library conforms to a specific ABI (Application Binary Interface). An ABI is a set of calling conventions and data types associated with the compiler, OS, and processor where the library was built. For example, a C compiler on Linux/x64 usually builds libraries that conform to the SystemV ABI.                                                            </p><p> A linker has detailed knowledge of the calling conventions and data types used by a specific ABI. For any library which conforms to that ABI, the linker can mediate between Java code running in the JVM and foreign functions in the library. In particular:<ul><li> A linker allows Java code to link against foreign functions, via <a href="#downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">downcall method handles  </a>; and             </li><li> A linker allows foreign functions to call Java method handles, via the generation of <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)">upcall stubs </a>.               </li></ul> In addition, a linker provides a way to look up foreign functions in libraries that conform to the ABI. Each linker chooses a set of libraries that are commonly used on the OS and processor combination associated with the ABI. For example, a linker for Linux/x64 might choose two libraries: <code>libc</code> and <code>libm</code>. The functions in these libraries are exposed via a <a href="#defaultLookup()">symbol lookup </a>.                                                                                                           </p><p> The <a href="#nativeLinker()"><code>nativeLinker()</code></a> method provides a linker for the ABI associated with the OS and processor where the Java runtime is currently executing. This linker also provides access, via its <a href="#defaultLookup()">default lookup </a>, to the native libraries loaded with the Java runtime.                                       </p><h2 id="downcall-method-handles">Downcall method handles  </h2> <a href="#downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">Linking a foreign function   </a> is a process which requires a function descriptor, a set of memory layouts which, together, specify the signature of the foreign function to be linked, and returns, when complete, a downcall method handle, that is, a method handle that can be used to invoke the target foreign function.<p> The Java <a href="../invoke/MethodType.html" title="class in java.lang.invoke">method type </a> associated with the returned method handle is <a href="FunctionDescriptor.html#toMethodType()">derived</a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> from the argument and return layouts in the function descriptor. The downcall method handle type, might then be decorated by additional leading parameters, in the given order if both are present:<ul><li> If the downcall method handle is created <a href="#downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">without specifying a target address    </a>, the downcall method handle type features a leading parameter of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>, from which the address of the target foreign function can be derived.                                </li><li> If the function descriptor's return layout is a group layout, the resulting downcall method handle accepts an additional leading parameter of type <a href="SegmentAllocator.html" title="interface in java.lang.foreign"><code>SegmentAllocator</code></a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>, which is used by the linker runtime to allocate the memory region associated with the struct returned by the downcall method handle.                                             </li></ul>                                          </p><h2 id="upcall-stubs">Upcall stubs </h2> <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)">Creating an upcall stub   </a> requires a method handle and a function descriptor; in this case, the set of memory layouts in the function descriptor specify the signature of the function pointer associated with the upcall stub.<p> The type of the provided method handle's type has to match the method type associated with the upcall stub, which is <a href="FunctionDescriptor.html#toMethodType()">derived</a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> from the provided function descriptor.                           </p><p> Upcall stubs are modelled by instances of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>; upcall stubs can be passed by reference to other downcall method handles. An upcall stub can be released by <a href="Arena.html#close()">closing</a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup> the arena which was used to create it.                                     </p><h2 id="safety">Safety considerations </h2> Creating a downcall method handle is intrinsically unsafe. A symbol in a foreign library does not, in general, contain enough signature information (e.g. arity and types of foreign function parameters). As a consequence, the linker runtime cannot validate linkage requests. When a client interacts with a downcall method handle obtained through an invalid linkage request (e.g. by specifying a function descriptor featuring too many argument layouts), the result of such interaction is unspecified and can lead to JVM crashes. On downcall handle invocation, the linker runtime guarantees the following for any argument <code>A</code> of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> whose corresponding layout is <a href="ValueLayout.html#ADDRESS"><code>ValueLayout.ADDRESS</code></a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup>:<ul><li> <code>A.scope().isAlive() == true  </code>. Otherwise, the invocation throws <a href="../IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>;      </li><li> The invocation occurs in a thread <code>T</code> such that <code>A.isAccessibleBy(T) == true  </code>. Otherwise, the invocation throws <a href="../WrongThreadException.html" title="class in java.lang"><code>WrongThreadException</code></a>; and                </li><li> <code>A</code> is kept alive during the invocation. For instance, if <code>A</code> has been obtained using a <a href="Arena.html#ofConfined()">confined arena </a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup>, any attempt to <a href="Arena.html#close()">close</a><sup><a href="Arena.html#preview-java.lang.foreign.Arena">PREVIEW</a></sup> the confined arena while the downcall method handle is executing will result in a <a href="../IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>.                                    </li></ul> A downcall method handle created from a function descriptor whose return layout is an <a href="ValueLayout.OfAddress.html" title="interface in java.lang.foreign">address layout </a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup> returns a native segment associated with a fresh scope that is always alive. Under normal conditions, the size of the returned segment is <code>0</code>. However, if the return address layout has a <a href="ValueLayout.OfAddress.html#targetLayout()">ValueLayout.OfAddress.targetLayout()</a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup><code>T</code>, then the size of the returned segment is set to <code>T.byteSize()</code>.<p> When creating upcall stubs the linker runtime validates the type of the target method handle against the provided function descriptor and report an error if any mismatch is detected. As for downcalls, JVM crashes might occur, if the foreign code casts the function pointer associated with an upcall stub to a type that is incompatible with the provided function descriptor. Moreover, if the target method handle associated with an upcall stub returns a <a href="MemorySegment.html" title="interface in java.lang.foreign">memory segment </a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>, clients must ensure that this address cannot become invalid after the upcall completes. This can lead to unspecified behavior, and even JVM crashes, since an upcall is typically executed in the context of a downcall method handle invocation.                                                                                                                </p><p> An upcall stub argument whose corresponding layout is an <a href="ValueLayout.OfAddress.html" title="interface in java.lang.foreign">address layout </a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup> is a native segment associated with a fresh scope that is always alive. Under normal conditions, the size of this segment argument is <code>0</code>. However, if the address layout has a <a href="ValueLayout.OfAddress.html#targetLayout()">ValueLayout.OfAddress.targetLayout()</a><sup><a href="ValueLayout.OfAddress.html#preview-java.lang.foreign.ValueLayout.OfAddress">PREVIEW</a></sup><code>T</code>, then the size of the segment argument is set to <code>T.byteSize()</code>.                                                     </p>                                                                                                                                                                                                                                                                    </div><dl class="notes"> <dt>Implementation Requirements: </dt><dd> Implementations of this interface are immutable, thread-safe and <a href="../../../../java.base/java/lang/doc-files/ValueBased.html">value-based</a>.         </dd> <dt>Since:</dt><dd>19</dd>  </dl>   </section> <a end_ctx_id="class:Linker"/>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:nativeLinker() [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"><li> <a start_ctx_id="method:nativeLinker()"/> <section class="detail" id="nativeLinker()"><h3>nativeLinker</h3><div class="member-signature"> <span class="modifiers">static</span> <span class="return-type"><a href="Linker.html" title="interface in java.lang.foreign">Linker</a><sup><a href="#preview-java.lang.foreign.Linker">PREVIEW</a></sup></span> <span class="element-name">nativeLinker</span>() </div><div class="block"> Returns a linker for the ABI associated with the underlying native platform. The underlying native platform is the combination of OS and processor where the Java runtime is currently executing.<p> When interacting with the returned linker, clients must describe the signature of a foreign function using a <a href="FunctionDescriptor.html" title="interface in java.lang.foreign"><code>function descriptor </code></a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> whose argument and return layouts are specified as follows:<ul><li> Scalar types are modelled by a <a href="ValueLayout.html" title="interface in java.lang.foreign">value layout </a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup> instance of a suitable carrier. Example of scalar types in C are <code>int</code>, <code>long</code>, <code>size_t</code>, etc. The mapping between a scalar type and its corresponding layout is dependent on the ABI of the returned linker;                                          </li><li> Composite types are modelled by a <a href="GroupLayout.html" title="interface in java.lang.foreign">group layout </a><sup><a href="GroupLayout.html#preview-java.lang.foreign.GroupLayout">PREVIEW</a></sup>. Depending on the ABI of the returned linker, additional <a href="MemoryLayout.html#paddingLayout(long)">padding</a><sup><a href="MemoryLayout.html#preview-java.lang.foreign.MemoryLayout">PREVIEW</a></sup> member layouts might be required to conform to the size and alignment constraint of a composite type definition in C (e.g. using <code>struct</code> or <code>union</code>); and                                           </li><li> Pointer types are modelled by a <a href="ValueLayout.html" title="interface in java.lang.foreign">value layout </a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup> instance with carrier <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>. Examples of pointer types in C are <code>int**</code> and <code>int(*)(size_t*, size_t*) </code>;                     </li></ul>                           </p><p> Any layout not listed above is <em>unsupported</em>; function descriptors containing unsupported layouts will cause an <a href="../IllegalArgumentException.html" title="class in java.lang"><code>IllegalArgumentException</code></a> to be thrown, when used to create a <a href="#downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"><code>downcall method handle  </code></a> or an <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)">upcall stub </a>.                            </p><p> Variadic functions (e.g. a C function declared with a trailing ellipses <code>...</code> at the end of the formal parameter list or with an empty formal parameter list) are not supported directly. However, it is possible to link a variadic function by using <a href="Linker.Option.html#firstVariadicArg(int)">a linker option  </a><sup><a href="Linker.Option.html#preview-java.lang.foreign.Linker.Option">PREVIEW</a></sup> to indicate the start of the list of variadic arguments, together with a specialized function descriptor describing a given variable arity callsite. <span class="diff-html-removed">Alternatively,</span> <span class="diff-html-removed">where</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">foreign</span> <span class="diff-html-removed">library</span> <span class="diff-html-removed">allows</span> <span class="diff-html-removed">it,</span> <span class="diff-html-removed">clients</span> <span class="diff-html-removed">might</span> <span class="diff-html-removed">be</span> <span class="diff-html-removed">able</span> <span class="diff-html-removed">to</span> <span class="diff-html-removed">interact</span> <span class="diff-html-removed">with</span> <span class="diff-html-removed">variadic</span> <span class="diff-html-removed">functions</span> <span class="diff-html-removed">by</span> <span class="diff-html-removed">passing</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">trailing</span> <span class="diff-html-removed">parameter</span> <span class="diff-html-removed">of</span> <span class="diff-html-removed">type</span> <a href="VaList.html" title="interface in java.lang.foreign" changeType="diff-removed-tag"><code><span class="diff-html-removed">VaList</span></code><span class="diff-html-removed"/></a><sup changeType="diff-removed-tag"><a href="VaList.html#preview-java.lang.foreign.VaList"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup> <span class="diff-html-removed">(e.g.</span> <span class="diff-html-removed">as</span> <span class="diff-html-removed">in</span> <code changeType="diff-removed-tag"><span class="diff-html-removed">vsprintf</span></code><span class="diff-html-removed">).</span>                                                                                             </p><p> This method is <a href="package-summary.html#restricted"><em>restricted</em></a>. Restricted methods are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.                                          </p>                              </div><dl class="notes"> <dt>API Note: </dt><dd>It is not currently possible to obtain a linker for a different combination of OS and processor.                </dd> <dt>Implementation Note: </dt><dd> The libraries exposed by the <a href="#defaultLookup()">default lookup </a> associated with the returned linker are the native libraries loaded in the process where the Java runtime is currently executing. For example, on Linux, these libraries typically include <code>libc</code>, <code>libm</code> and <code>libdl</code>.                                      </dd> <dt>Returns:</dt><dd>a linker for the ABI associated with the OS and processor where the Java runtime is currently executing.                 </dd> <dt>Throws:</dt><dd> <code><a href="../UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the underlying native platform is not supported.          </dd><dd> <code><a href="../IllegalCallerException.html" title="class in java.lang">IllegalCallerException</a></code> - If the caller is in a module that does not have native access enabled.                </dd>    </dl>  </section>  </li> <a end_ctx_id="method:nativeLinker()"/> </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"><li> <a start_ctx_id="method:nativeLinker()"/> <section class="detail" id="nativeLinker()"><h3>nativeLinker</h3><div class="member-signature"> <span class="modifiers">static</span> <span class="return-type"><a href="Linker.html" title="interface in java.lang.foreign">Linker</a><sup><a href="#preview-java.lang.foreign.Linker">PREVIEW</a></sup></span> <span class="element-name">nativeLinker</span>() </div><div class="block"> Returns a linker for the ABI associated with the underlying native platform. The underlying native platform is the combination of OS and processor where the Java runtime is currently executing.<p> When interacting with the returned linker, clients must describe the signature of a foreign function using a <a href="FunctionDescriptor.html" title="interface in java.lang.foreign"><code>function descriptor </code></a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> whose argument and return layouts are specified as follows:<ul><li> Scalar types are modelled by a <a href="ValueLayout.html" title="interface in java.lang.foreign">value layout </a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup> instance of a suitable carrier. Example of scalar types in C are <code>int</code>, <code>long</code>, <code>size_t</code>, etc. The mapping between a scalar type and its corresponding layout is dependent on the ABI of the returned linker;                                          </li><li> Composite types are modelled by a <a href="GroupLayout.html" title="interface in java.lang.foreign">group layout </a><sup><a href="GroupLayout.html#preview-java.lang.foreign.GroupLayout">PREVIEW</a></sup>. Depending on the ABI of the returned linker, additional <a href="MemoryLayout.html#paddingLayout(long)">padding</a><sup><a href="MemoryLayout.html#preview-java.lang.foreign.MemoryLayout">PREVIEW</a></sup> member layouts might be required to conform to the size and alignment constraint of a composite type definition in C (e.g. using <code>struct</code> or <code>union</code>); and                                           </li><li> Pointer types are modelled by a <a href="ValueLayout.html" title="interface in java.lang.foreign">value layout </a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup> instance with carrier <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>. Examples of pointer types in C are <code>int**</code> and <code>int(*)(size_t*, size_t*) </code>;                     </li></ul>                           </p><p> Any layout not listed above is <em>unsupported</em>; function descriptors containing unsupported layouts will cause an <a href="../IllegalArgumentException.html" title="class in java.lang"><code>IllegalArgumentException</code></a> to be thrown, when used to create a <a href="#downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"><code>downcall method handle  </code></a> or an <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.SegmentScope)">upcall stub </a>.                            </p><p> Variadic functions (e.g. a C function declared with a trailing ellipses <code>...</code> at the end of the formal parameter list or with an empty formal parameter list) are not supported directly. However, it is possible to link a variadic function by using <a href="Linker.Option.html#firstVariadicArg(int)">a linker option  </a><sup><a href="Linker.Option.html#preview-java.lang.foreign.Linker.Option">PREVIEW</a></sup> to indicate the start of the list of variadic arguments, together with a specialized function descriptor describing a given variable arity callsite. Alternatively, where the foreign library allows it, clients might be able to interact with variadic functions by passing a trailing parameter of type <a href="VaList.html" title="interface in java.lang.foreign" changeType="diff-removed-tag"><code>VaList</code></a><sup changeType="diff-removed-tag"><a href="VaList.html#preview-java.lang.foreign.VaList">PREVIEW</a></sup> (e.g. as in <code changeType="diff-removed-tag">vsprintf</code>).                                                                                             </p><p> This method is <a href="package-summary.html#restricted"><em>restricted</em></a>. Restricted methods are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.                                          </p>                              </div><dl class="notes"> <dt>API Note: </dt><dd>It is not currently possible to obtain a linker for a different combination of OS and processor.                </dd> <dt>Implementation Note: </dt><dd> The libraries exposed by the <a href="#defaultLookup()">default lookup </a> associated with the returned linker are the native libraries loaded in the process where the Java runtime is currently executing. For example, on Linux, these libraries typically include <code>libc</code>, <code>libm</code> and <code>libdl</code>.                                      </dd> <dt>Returns:</dt><dd>a linker for the ABI associated with the OS and processor where the Java runtime is currently executing.                 </dd> <dt>Throws:</dt><dd> <code><a href="../UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the underlying native platform is not supported.          </dd><dd> <code><a href="../IllegalCallerException.html" title="class in java.lang">IllegalCallerException</a></code> - If the caller is in a module that does not have native access enabled.                </dd>    </dl>  </section>  </li> <a end_ctx_id="method:nativeLinker()"/> </td><td bgcolor="#FFFFFF" colspan="1"><li> <a start_ctx_id="method:nativeLinker()"/> <section class="detail" id="nativeLinker()"><h3>nativeLinker</h3><div class="member-signature"> <span class="modifiers">static</span> <span class="return-type"><a href="Linker.html" title="interface in java.lang.foreign">Linker</a><sup><a href="#preview-java.lang.foreign.Linker">PREVIEW</a></sup></span> <span class="element-name">nativeLinker</span>() </div><div class="block"> Returns a linker for the ABI associated with the underlying native platform. The underlying native platform is the combination of OS and processor where the Java runtime is currently executing.<p> When interacting with the returned linker, clients must describe the signature of a foreign function using a <a href="FunctionDescriptor.html" title="interface in java.lang.foreign"><code>function descriptor </code></a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> whose argument and return layouts are specified as follows:<ul><li> Scalar types are modelled by a <a href="ValueLayout.html" title="interface in java.lang.foreign">value layout </a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup> instance of a suitable carrier. Example of scalar types in C are <code>int</code>, <code>long</code>, <code>size_t</code>, etc. The mapping between a scalar type and its corresponding layout is dependent on the ABI of the returned linker;                                          </li><li> Composite types are modelled by a <a href="GroupLayout.html" title="interface in java.lang.foreign">group layout </a><sup><a href="GroupLayout.html#preview-java.lang.foreign.GroupLayout">PREVIEW</a></sup>. Depending on the ABI of the returned linker, additional <a href="MemoryLayout.html#paddingLayout(long)">padding</a><sup><a href="MemoryLayout.html#preview-java.lang.foreign.MemoryLayout">PREVIEW</a></sup> member layouts might be required to conform to the size and alignment constraint of a composite type definition in C (e.g. using <code>struct</code> or <code>union</code>); and                                           </li><li> Pointer types are modelled by a <a href="ValueLayout.html" title="interface in java.lang.foreign">value layout </a><sup><a href="ValueLayout.html#preview-java.lang.foreign.ValueLayout">PREVIEW</a></sup> instance with carrier <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>. Examples of pointer types in C are <code>int**</code> and <code>int(*)(size_t*, size_t*) </code>;                     </li></ul>                           </p><p> Any layout not listed above is <em>unsupported</em>; function descriptors containing unsupported layouts will cause an <a href="../IllegalArgumentException.html" title="class in java.lang"><code>IllegalArgumentException</code></a> to be thrown, when used to create a <a href="#downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"><code>downcall method handle  </code></a> or an <a href="#upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)">upcall stub </a>.                            </p><p> Variadic functions (e.g. a C function declared with a trailing ellipses <code>...</code> at the end of the formal parameter list or with an empty formal parameter list) are not supported directly. However, it is possible to link a variadic function by using <a href="Linker.Option.html#firstVariadicArg(int)">a linker option  </a><sup><a href="Linker.Option.html#preview-java.lang.foreign.Linker.Option">PREVIEW</a></sup> to indicate the start of the list of variadic arguments, together with a specialized function descriptor describing a given variable arity callsite.                                                                 </p><p> This method is <a href="package-summary.html#restricted"><em>restricted</em></a>. Restricted methods are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.                                          </p>                              </div><dl class="notes"> <dt>API Note: </dt><dd>It is not currently possible to obtain a linker for a different combination of OS and processor.                </dd> <dt>Implementation Note: </dt><dd> The libraries exposed by the <a href="#defaultLookup()">default lookup </a> associated with the returned linker are the native libraries loaded in the process where the Java runtime is currently executing. For example, on Linux, these libraries typically include <code>libc</code>, <code>libm</code> and <code>libdl</code>.                                      </dd> <dt>Returns:</dt><dd>a linker for the ABI associated with the OS and processor where the Java runtime is currently executing.                 </dd> <dt>Throws:</dt><dd> <code><a href="../UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if the underlying native platform is not supported.          </dd><dd> <code><a href="../IllegalCallerException.html" title="class in java.lang">IllegalCallerException</a></code> - If the caller is in a module that does not have native access enabled.                </dd>    </dl>  </section>  </li> <a end_ctx_id="method:nativeLinker()"/> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...) [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"/> <section class="detail" id="downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"><h3>downcallHandle</h3><div class="member-signature"> <span class="modifiers">default</span> <span class="return-type"><a href="../invoke/MethodHandle.html" title="class in java.lang.invoke">MethodHandle</a></span> <span class="element-name">downcallHandle</span> <wbr/> <span class="parameters">(<a href="MemorySegment.html" title="interface in java.lang.foreign">MemorySegment</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> symbol, <a href="FunctionDescriptor.html" title="interface in java.lang.foreign">FunctionDescriptor</a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> function, <a href="Linker.Option.html" title="interface in java.lang.foreign">Linker.Option</a><sup><a href="Linker.Option.html#preview-java.lang.foreign.Linker.Option">PREVIEW</a></sup>... options)  </span>   </div><div class="block"> Creates a method handle which can be used to call a foreign function with the given signature and address.<p> If the provided method type's return type is <code>MemorySegment</code>, then the resulting method handle features an additional prefix parameter, of type <a href="SegmentAllocator.html" title="interface in java.lang.foreign"><code>SegmentAllocator</code></a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>, which will be used by the linker to allocate structs returned by-value.                                  </p><p> Calling this method is equivalent to the following code:         </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                                            <code class="language-java">linker.downcallHandle(function).bindTo(symbol);
</code>
                                                        </pre> </div>                   </div><dl class="notes"> <dt>Parameters:</dt><dd> <code>symbol</code> - the address of the target function.        </dd><dd> <code>function</code> - the function descriptor of the target function.         </dd><dd> <code>options</code> - any linker options.     </dd> <dt>Returns:</dt><dd> a downcall method handle. The method handle type is <a href="Linker.html#downcall-method-handles"><em>inferred</em></a>          </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the provided function descriptor is not supported by this linker. or if the symbol is <a href="MemorySegment.html#NULL"><code>MemorySegment.NULL</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>                   </dd><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if an invalid combination of linker options is given.           </dd>   </dl>  </section> <a end_ctx_id="method:downcallHandle(java.lang.foreign.MemorySegment,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"/>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...) [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"/> <section class="detail" id="downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"><h3>downcallHandle</h3><div class="member-signature"> <span class="return-type"><a href="../invoke/MethodHandle.html" title="class in java.lang.invoke">MethodHandle</a></span> <span class="element-name">downcallHandle</span> <wbr/> <span class="parameters">(<a href="FunctionDescriptor.html" title="interface in java.lang.foreign">FunctionDescriptor</a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor">PREVIEW</a></sup> function, <a href="Linker.Option.html" title="interface in java.lang.foreign">Linker.Option</a><sup><a href="Linker.Option.html#preview-java.lang.foreign.Linker.Option">PREVIEW</a></sup>... options) </span>   </div><div class="block"> Creates a method handle which can be used to call a foreign function with the given signature. The resulting method handle features a prefix parameter (as the first parameter) corresponding to the foreign function entry point, of type <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup>, which is used to specify the address of the target function to be called.<p> If the provided function descriptor's return layout is a <a href="GroupLayout.html" title="interface in java.lang.foreign"><code>GroupLayout</code></a><sup><a href="GroupLayout.html#preview-java.lang.foreign.GroupLayout">PREVIEW</a></sup>, then the resulting method handle features an additional prefix parameter (inserted immediately after the address parameter), of type <a href="SegmentAllocator.html" title="interface in java.lang.foreign"><code>SegmentAllocator</code></a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>), which will be used by the linker to allocate structs returned by-value.                                         </p><p> The returned method handle will throw an <a href="../IllegalArgumentException.html" title="class in java.lang"><code>IllegalArgumentException</code></a> if the <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> parameter passed to it is associated with the <a href="MemorySegment.html#NULL"><code>MemorySegment.NULL</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> address, or a <a href="../NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> if that parameter is <code>null</code>.                             </p>                                                     </div><dl class="notes"> <dt>Parameters:</dt><dd> <code>function</code> - the function descriptor of the target function.         </dd><dd> <code>options</code> - any linker options.     </dd> <dt>Returns:</dt><dd> a downcall method handle. The method handle type is <a href="Linker.html#downcall-method-handles"><em>inferred</em></a> from the provided function descriptor.               </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if the provided function descriptor is not supported by this linker.             </dd><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if an invalid combination of linker options is given.           </dd>   </dl>  </section> <a end_ctx_id="method:downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"/>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.SegmentScope) [REMOVED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.SegmentScope)" changeType="diff-removed-tag"><span class="diff-html-removed"/></a> <section class="detail" id="upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.SegmentScope)" changeType="diff-removed-tag"><h3><span class="diff-html-removed">upcallStub</span></h3><div class="member-signature"> <span class="return-type"><a href="MemorySegment.html" title="interface in java.lang.foreign"><span class="diff-html-removed">MemorySegment</span></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-removed"/></span><span class="diff-html-removed"> </span><span class="element-name"><span class="diff-html-removed">upcallStub</span></span> <wbr><span class="diff-html-removed"/></wbr> <span class="parameters"><span class="diff-html-removed">(</span><a href="../invoke/MethodHandle.html" title="class in java.lang.invoke"><span class="diff-html-removed">MethodHandle</span></a><span class="diff-html-removed"> target,</span> <a href="FunctionDescriptor.html" title="interface in java.lang.foreign"><span class="diff-html-removed">FunctionDescriptor</span></a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-removed"> function,</span> <a href="SegmentScope.html" title="interface in java.lang.foreign"><span class="diff-html-removed">SegmentScope</span></a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-removed"> scope)</span>  </span>   </div><div class="block"> <span class="diff-html-removed">Creates</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">stub</span> <span class="diff-html-removed">which</span> <span class="diff-html-removed">can</span> <span class="diff-html-removed">be</span> <span class="diff-html-removed">passed</span> <span class="diff-html-removed">to</span> <span class="diff-html-removed">other</span> <span class="diff-html-removed">foreign</span> <span class="diff-html-removed">functions</span> <span class="diff-html-removed">as</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">function</span> <span class="diff-html-removed">pointer,</span> <span class="diff-html-removed">associated</span> <span class="diff-html-removed">with</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">given</span> <span class="diff-html-removed">scope.</span> <span class="diff-html-removed">Calling</span> <span class="diff-html-removed">such</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">function</span> <span class="diff-html-removed">pointer</span> <span class="diff-html-removed">from</span> <span class="diff-html-removed">foreign</span> <span class="diff-html-removed">code</span> <span class="diff-html-removed">will</span> <span class="diff-html-removed">result</span> <span class="diff-html-removed">in</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">execution</span> <span class="diff-html-removed">of</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">provided</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">handle.</span><p> <span class="diff-html-removed">The</span> <span class="diff-html-removed">returned</span> <span class="diff-html-removed">memory</span> <span class="diff-html-removed">segment's</span> <span class="diff-html-removed">address</span> <span class="diff-html-removed">points</span> <span class="diff-html-removed">to</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">newly</span> <span class="diff-html-removed">allocated</span> <span class="diff-html-removed">upcall</span> <span class="diff-html-removed">stub,</span> <span class="diff-html-removed">and</span> <span class="diff-html-removed">is</span> <span class="diff-html-removed">associated</span> <span class="diff-html-removed">with</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">provided</span> <span class="diff-html-removed">scope.</span> <span class="diff-html-removed">As</span> <span class="diff-html-removed">such,</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">corresponding</span> <span class="diff-html-removed">upcall</span> <span class="diff-html-removed">stub</span> <span class="diff-html-removed">will</span> <span class="diff-html-removed">be</span> <span class="diff-html-removed">deallocated</span> <span class="diff-html-removed">when</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">scope</span> <span class="diff-html-removed">becomes</span> <span class="diff-html-removed">not</span> <a href="SegmentScope.html#isAlive()"><span class="diff-html-removed">alive</span></a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-removed">.</span>                                  </p><p> <span class="diff-html-removed">The</span> <span class="diff-html-removed">target</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">handle</span> <span class="diff-html-removed">should</span> <span class="diff-html-removed">not</span> <span class="diff-html-removed">throw</span> <span class="diff-html-removed">any</span> <span class="diff-html-removed">exceptions.</span> <span class="diff-html-removed">If</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">target</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">handle</span> <span class="diff-html-removed">does</span> <span class="diff-html-removed">throw</span> <span class="diff-html-removed">an</span> <span class="diff-html-removed">exception,</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">VM</span> <span class="diff-html-removed">will</span> <span class="diff-html-removed">exit</span> <span class="diff-html-removed">with</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">non-zero</span> <span class="diff-html-removed">exit</span> <span class="diff-html-removed">code.</span> <span class="diff-html-removed">To</span> <span class="diff-html-removed">avoid</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">VM</span> <span class="diff-html-removed">aborting</span> <span class="diff-html-removed">due</span> <span class="diff-html-removed">to</span> <span class="diff-html-removed">an</span> <span class="diff-html-removed">uncaught</span> <span class="diff-html-removed">exception,</span> <span class="diff-html-removed">clients</span> <span class="diff-html-removed">could</span> <span class="diff-html-removed">wrap</span> <span class="diff-html-removed">all</span> <span class="diff-html-removed">code</span> <span class="diff-html-removed">in</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">target</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">handle</span> <span class="diff-html-removed">in</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">try/catch</span> <span class="diff-html-removed">block</span> <span class="diff-html-removed">that</span> <span class="diff-html-removed">catches</span> <span class="diff-html-removed">any</span> <a href="../Throwable.html" title="class in java.lang"><code><span class="diff-html-removed">Throwable</span></code><span class="diff-html-removed"/></a><span class="diff-html-removed">,</span> <span class="diff-html-removed">for</span> <span class="diff-html-removed">instance</span> <span class="diff-html-removed">by</span> <span class="diff-html-removed">using</span> <span class="diff-html-removed">the</span> <a href="../invoke/MethodHandles.html#catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)"><code><span class="diff-html-removed">MethodHandles.catchException(MethodHandle,</span> <span class="diff-html-removed">Class,</span> <span class="diff-html-removed">MethodHandle)</span>  </code><span class="diff-html-removed"/></a> <span class="diff-html-removed">method</span> <span class="diff-html-removed">handle</span> <span class="diff-html-removed">combinator,</span> <span class="diff-html-removed">and</span> <span class="diff-html-removed">handle</span> <span class="diff-html-removed">exceptions</span> <span class="diff-html-removed">as</span> <span class="diff-html-removed">desired</span> <span class="diff-html-removed">in</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">corresponding</span> <span class="diff-html-removed">catch</span> <span class="diff-html-removed">block.</span>                                                                          </p>                                      </div><dl class="notes"> <dt><span class="diff-html-removed">Parameters:</span></dt><dd> <code><span class="diff-html-removed">target</span></code> <span class="diff-html-removed">-</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">target</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">handle.</span>      </dd><dd> <code><span class="diff-html-removed">function</span></code> <span class="diff-html-removed">-</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">upcall</span> <span class="diff-html-removed">stub</span> <span class="diff-html-removed">function</span> <span class="diff-html-removed">descriptor.</span>       </dd><dd> <code><span class="diff-html-removed">scope</span></code> <span class="diff-html-removed">-</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">scope</span> <span class="diff-html-removed">associated</span> <span class="diff-html-removed">with</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">returned</span> <span class="diff-html-removed">upcall</span> <span class="diff-html-removed">stub</span> <span class="diff-html-removed">segment.</span>           </dd> <dt><span class="diff-html-removed">Returns:</span></dt><dd><span class="diff-html-removed">a</span> <span class="diff-html-removed">zero-length</span> <span class="diff-html-removed">segment</span> <span class="diff-html-removed">whose</span> <span class="diff-html-removed">address</span> <span class="diff-html-removed">is</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">address</span> <span class="diff-html-removed">of</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">upcall</span> <span class="diff-html-removed">stub.</span>           </dd> <dt><span class="diff-html-removed">Throws:</span></dt><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang"><span class="diff-html-removed">IllegalArgumentException</span></a><span class="diff-html-removed"/></code> <span class="diff-html-removed">-</span> <span class="diff-html-removed">if</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">provided</span> <span class="diff-html-removed">function</span> <span class="diff-html-removed">descriptor</span> <span class="diff-html-removed">is</span> <span class="diff-html-removed">not</span> <span class="diff-html-removed">supported</span> <span class="diff-html-removed">by</span> <span class="diff-html-removed">this</span> <span class="diff-html-removed">linker.</span>             </dd><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang"><span class="diff-html-removed">IllegalArgumentException</span></a><span class="diff-html-removed"/></code> <span class="diff-html-removed">-</span> <span class="diff-html-removed">if</span> <span class="diff-html-removed">it</span> <span class="diff-html-removed">is</span> <span class="diff-html-removed">determined</span> <span class="diff-html-removed">that</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">target</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">handle</span> <span class="diff-html-removed">can</span> <span class="diff-html-removed">throw</span> <span class="diff-html-removed">an</span> <span class="diff-html-removed">exception,</span> <span class="diff-html-removed">or</span> <span class="diff-html-removed">if</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">target</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">handle</span> <span class="diff-html-removed">has</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">type</span> <span class="diff-html-removed">that</span> <span class="diff-html-removed">does</span> <span class="diff-html-removed">not</span> <span class="diff-html-removed">match</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">upcall</span> <span class="diff-html-removed">stub</span> <a href="Linker.html#upcall-stubs"><em><span class="diff-html-removed">inferred</span> <span class="diff-html-removed">type</span> </em><span class="diff-html-removed"/></a><span class="diff-html-removed">.</span>                                </dd><dd> <code><a href="../IllegalStateException.html" title="class in java.lang"><span class="diff-html-removed">IllegalStateException</span></a><span class="diff-html-removed"/></code> <span class="diff-html-removed">-</span> <span class="diff-html-removed">if</span> <code><span class="diff-html-removed">scope</span></code> <span class="diff-html-removed">is</span> <span class="diff-html-removed">not</span> <a href="SegmentScope.html#isAlive()"><span class="diff-html-removed">alive</span></a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-removed">.</span>       </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang"><span class="diff-html-removed">WrongThreadException</span></a><span class="diff-html-removed"/></code> <span class="diff-html-removed">-</span> <span class="diff-html-removed">if</span> <span class="diff-html-removed">this</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">is</span> <span class="diff-html-removed">called</span> <span class="diff-html-removed">from</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">thread</span> <code><span class="diff-html-removed">T</span></code><span class="diff-html-removed">,</span> <span class="diff-html-removed">such</span> <span class="diff-html-removed">that</span> <code><span class="diff-html-removed">scope.isAccessibleBy(T)</span> <span class="diff-html-removed">==</span> <span class="diff-html-removed">false</span>  </code><span class="diff-html-removed">.</span>              </dd>   </dl> <span class="diff-html-removed"/> </section> <a end_ctx_id="method:upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.SegmentScope)" changeType="diff-removed-tag"><span class="diff-html-removed"/></a>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...) [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)"><span class="diff-html-added"/></a> <section class="detail" id="upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)"><h3><span class="diff-html-added">upcallStub</span></h3><div class="member-signature"> <span class="return-type"><a href="MemorySegment.html" title="interface in java.lang.foreign"><span class="diff-html-added">MemorySegment</span></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"><span class="diff-html-added">PREVIEW</span></a></sup></span> <span class="element-name"><span class="diff-html-added">upcallStub</span></span> <wbr/> <span class="parameters"><span class="diff-html-added">(</span><a href="../invoke/MethodHandle.html" title="class in java.lang.invoke"><span class="diff-html-added">MethodHandle</span></a><span class="diff-html-added"> target,</span> <a href="FunctionDescriptor.html" title="interface in java.lang.foreign"><span class="diff-html-added">FunctionDescriptor</span></a><sup><a href="FunctionDescriptor.html#preview-java.lang.foreign.FunctionDescriptor"><span class="diff-html-added">PREVIEW</span></a></sup><span class="diff-html-added"> function,</span> <a href="Arena.html" title="interface in java.lang.foreign"><span class="diff-html-added">Arena</span></a><sup><a href="Arena.html#preview-java.lang.foreign.Arena"><span class="diff-html-added">PREVIEW</span></a></sup><span class="diff-html-added"> arena,</span> <a href="Linker.Option.html" title="interface in java.lang.foreign"><span class="diff-html-added">Linker.Option</span></a><sup><a href="Linker.Option.html#preview-java.lang.foreign.Linker.Option"><span class="diff-html-added">PREVIEW</span></a></sup><span class="diff-html-added">... options)</span>   </span>   </div><div class="block"> <span class="diff-html-added">Creates</span> <span class="diff-html-added">a</span> <span class="diff-html-added">stub</span> <span class="diff-html-added">which</span> <span class="diff-html-added">can</span> <span class="diff-html-added">be</span> <span class="diff-html-added">passed</span> <span class="diff-html-added">to</span> <span class="diff-html-added">other</span> <span class="diff-html-added">foreign</span> <span class="diff-html-added">functions</span> <span class="diff-html-added">as</span> <span class="diff-html-added">a</span> <span class="diff-html-added">function</span> <span class="diff-html-added">pointer,</span> <span class="diff-html-added">associated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">given</span> <span class="diff-html-added">arena.</span> <span class="diff-html-added">Calling</span> <span class="diff-html-added">such</span> <span class="diff-html-added">a</span> <span class="diff-html-added">function</span> <span class="diff-html-added">pointer</span> <span class="diff-html-added">from</span> <span class="diff-html-added">foreign</span> <span class="diff-html-added">code</span> <span class="diff-html-added">will</span> <span class="diff-html-added">result</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">execution</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">provided</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle.</span><p> <span class="diff-html-added">The</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">segment's</span> <span class="diff-html-added">address</span> <span class="diff-html-added">points</span> <span class="diff-html-added">to</span> <span class="diff-html-added">the</span> <span class="diff-html-added">newly</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">upcall</span> <span class="diff-html-added">stub,</span> <span class="diff-html-added">and</span> <span class="diff-html-added">is</span> <span class="diff-html-added">associated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">provided</span> <span class="diff-html-added">arena.</span> <span class="diff-html-added">As</span> <span class="diff-html-added">such,</span> <span class="diff-html-added">the</span> <span class="diff-html-added">lifetime</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">upcall</span> <span class="diff-html-added">stub</span> <span class="diff-html-added">segment</span> <span class="diff-html-added">is</span> <span class="diff-html-added">controlled</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">provided</span> <span class="diff-html-added">arena.</span> <span class="diff-html-added">For</span> <span class="diff-html-added">instance,</span> <span class="diff-html-added">if</span> <span class="diff-html-added">the</span> <span class="diff-html-added">provided</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">is</span> <span class="diff-html-added">a</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena,</span> <span class="diff-html-added">the</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">upcall</span> <span class="diff-html-added">stub</span> <span class="diff-html-added">segment</span> <span class="diff-html-added">will</span> <span class="diff-html-added">be</span> <span class="diff-html-added">deallocated</span> <span class="diff-html-added">when</span> <span class="diff-html-added">the</span> <span class="diff-html-added">provided</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">is</span> <a href="Arena.html#close()"><span class="diff-html-added">closed</span></a><sup><a href="Arena.html#preview-java.lang.foreign.Arena"><span class="diff-html-added">PREVIEW</span></a></sup><span class="diff-html-added">.</span>                                                            </p><p> <span class="diff-html-added">The</span> <span class="diff-html-added">target</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle</span> <span class="diff-html-added">should</span> <span class="diff-html-added">not</span> <span class="diff-html-added">throw</span> <span class="diff-html-added">any</span> <span class="diff-html-added">exceptions.</span> <span class="diff-html-added">If</span> <span class="diff-html-added">the</span> <span class="diff-html-added">target</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle</span> <span class="diff-html-added">does</span> <span class="diff-html-added">throw</span> <span class="diff-html-added">an</span> <span class="diff-html-added">exception,</span> <span class="diff-html-added">the</span> <span class="diff-html-added">VM</span> <span class="diff-html-added">will</span> <span class="diff-html-added">exit</span> <span class="diff-html-added">with</span> <span class="diff-html-added">a</span> <span class="diff-html-added">non-zero</span> <span class="diff-html-added">exit</span> <span class="diff-html-added">code.</span> <span class="diff-html-added">To</span> <span class="diff-html-added">avoid</span> <span class="diff-html-added">the</span> <span class="diff-html-added">VM</span> <span class="diff-html-added">aborting</span> <span class="diff-html-added">due</span> <span class="diff-html-added">to</span> <span class="diff-html-added">an</span> <span class="diff-html-added">uncaught</span> <span class="diff-html-added">exception,</span> <span class="diff-html-added">clients</span> <span class="diff-html-added">could</span> <span class="diff-html-added">wrap</span> <span class="diff-html-added">all</span> <span class="diff-html-added">code</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">target</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle</span> <span class="diff-html-added">in</span> <span class="diff-html-added">a</span> <span class="diff-html-added">try/catch</span> <span class="diff-html-added">block</span> <span class="diff-html-added">that</span> <span class="diff-html-added">catches</span> <span class="diff-html-added">any</span> <a href="../Throwable.html" title="class in java.lang"><code><span class="diff-html-added">Throwable</span></code></a><span class="diff-html-added">,</span> <span class="diff-html-added">for</span> <span class="diff-html-added">instance</span> <span class="diff-html-added">by</span> <span class="diff-html-added">using</span> <span class="diff-html-added">the</span> <a href="../invoke/MethodHandles.html#catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)"><code><span class="diff-html-added">MethodHandles.catchException(MethodHandle,</span> <span class="diff-html-added">Class,</span> <span class="diff-html-added">MethodHandle)</span>  </code></a> <span class="diff-html-added">method</span> <span class="diff-html-added">handle</span> <span class="diff-html-added">combinator,</span> <span class="diff-html-added">and</span> <span class="diff-html-added">handle</span> <span class="diff-html-added">exceptions</span> <span class="diff-html-added">as</span> <span class="diff-html-added">desired</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">corresponding</span> <span class="diff-html-added">catch</span> <span class="diff-html-added">block.</span>                                                                          </p>                                      </div><dl class="notes"> <dt><span class="diff-html-added">Parameters:</span></dt><dd> <code><span class="diff-html-added">target</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">target</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle.</span>      </dd><dd> <code><span class="diff-html-added">function</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">upcall</span> <span class="diff-html-added">stub</span> <span class="diff-html-added">function</span> <span class="diff-html-added">descriptor.</span>       </dd><dd> <code><span class="diff-html-added">arena</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">the</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">associated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">upcall</span> <span class="diff-html-added">stub</span> <span class="diff-html-added">segment.</span>           </dd><dd> <code><span class="diff-html-added">options</span></code> <span class="diff-html-added">-</span> <span class="diff-html-added">any</span> <span class="diff-html-added">linker</span> <span class="diff-html-added">options.</span>     </dd> <dt><span class="diff-html-added">Returns:</span></dt><dd><span class="diff-html-added">a</span> <span class="diff-html-added">zero-length</span> <span class="diff-html-added">segment</span> <span class="diff-html-added">whose</span> <span class="diff-html-added">address</span> <span class="diff-html-added">is</span> <span class="diff-html-added">the</span> <span class="diff-html-added">address</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">upcall</span> <span class="diff-html-added">stub.</span>           </dd> <dt><span class="diff-html-added">Throws:</span></dt><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang"><span class="diff-html-added">IllegalArgumentException</span></a></code> <span class="diff-html-added">-</span> <span class="diff-html-added">if</span> <span class="diff-html-added">the</span> <span class="diff-html-added">provided</span> <span class="diff-html-added">function</span> <span class="diff-html-added">descriptor</span> <span class="diff-html-added">is</span> <span class="diff-html-added">not</span> <span class="diff-html-added">supported</span> <span class="diff-html-added">by</span> <span class="diff-html-added">this</span> <span class="diff-html-added">linker.</span>             </dd><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang"><span class="diff-html-added">IllegalArgumentException</span></a></code> <span class="diff-html-added">-</span> <span class="diff-html-added">if</span> <span class="diff-html-added">it</span> <span class="diff-html-added">is</span> <span class="diff-html-added">determined</span> <span class="diff-html-added">that</span> <span class="diff-html-added">the</span> <span class="diff-html-added">target</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle</span> <span class="diff-html-added">can</span> <span class="diff-html-added">throw</span> <span class="diff-html-added">an</span> <span class="diff-html-added">exception,</span> <span class="diff-html-added">or</span> <span class="diff-html-added">if</span> <span class="diff-html-added">the</span> <span class="diff-html-added">target</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle</span> <span class="diff-html-added">has</span> <span class="diff-html-added">a</span> <span class="diff-html-added">type</span> <span class="diff-html-added">that</span> <span class="diff-html-added">does</span> <span class="diff-html-added">not</span> <span class="diff-html-added">match</span> <span class="diff-html-added">the</span> <span class="diff-html-added">upcall</span> <span class="diff-html-added">stub</span> <a href="Linker.html#upcall-stubs"><em><span class="diff-html-added">inferred</span> <span class="diff-html-added">type</span> </em></a><span class="diff-html-added">.</span>                                </dd><dd> <code><a href="../IllegalStateException.html" title="class in java.lang"><span class="diff-html-added">IllegalStateException</span></a></code> <span class="diff-html-added">-</span> <span class="diff-html-added">if</span> <code><span class="diff-html-added">arena.scope().isAlive()</span> <span class="diff-html-added">==</span> <span class="diff-html-added">false</span>  </code>    </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang"><span class="diff-html-added">WrongThreadException</span></a></code> <span class="diff-html-added">-</span> <span class="diff-html-added">if</span> <code><span class="diff-html-added">arena</span></code> <span class="diff-html-added">is</span> <span class="diff-html-added">a</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena,</span> <span class="diff-html-added">and</span> <span class="diff-html-added">this</span> <span class="diff-html-added">method</span> <span class="diff-html-added">is</span> <span class="diff-html-added">called</span> <span class="diff-html-added">from</span> <span class="diff-html-added">a</span> <span class="diff-html-added">thread</span> <code><span class="diff-html-added">T</span></code><span class="diff-html-added">,</span> <span class="diff-html-added">other</span> <span class="diff-html-added">than</span> <span class="diff-html-added">the</span> <span class="diff-html-added">arena's</span> <span class="diff-html-added">owner</span> <span class="diff-html-added">thread.</span>                       </dd>   </dl>  </section> <a end_ctx_id="method:upcallStub(java.lang.invoke.MethodHandle,java.lang.foreign.FunctionDescriptor,java.lang.foreign.Arena,java.lang.foreign.Linker.Option...)"><span class="diff-html-added"/></a>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:defaultLookup() [NONE]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:defaultLookup()"/> <section class="detail" id="defaultLookup()"><h3>defaultLookup</h3><div class="member-signature"> <span class="return-type"><a href="SymbolLookup.html" title="interface in java.lang.foreign">SymbolLookup</a><sup><a href="SymbolLookup.html#preview-java.lang.foreign.SymbolLookup">PREVIEW</a></sup></span> <span class="element-name">defaultLookup</span>() </div><div class="block"> Returns a symbol lookup for symbols in a set of commonly used libraries.<p> Each <a href="Linker.html" title="interface in java.lang.foreign"><code>Linker</code></a><sup><a href="#preview-java.lang.foreign.Linker">PREVIEW</a></sup> is responsible for choosing libraries that are widely recognized as useful on the OS and processor combination supported by the <a href="Linker.html" title="interface in java.lang.foreign"><code>Linker</code></a><sup><a href="#preview-java.lang.foreign.Linker">PREVIEW</a></sup>. Accordingly, the precise set of symbols exposed by the symbol lookup is unspecified; it varies from one <a href="Linker.html" title="interface in java.lang.foreign"><code>Linker</code></a><sup><a href="#preview-java.lang.foreign.Linker">PREVIEW</a></sup> to another.                                           </p>             </div><dl class="notes"> <dt>Implementation Note: </dt><dd> It is strongly recommended that the result of <a href="#defaultLookup()"><code>defaultLookup()</code></a> exposes a set of symbols that is stable over time. Clients of <a href="#defaultLookup()"><code>defaultLookup()</code></a> are likely to fail if a symbol that was previously exposed by the symbol lookup is no longer exposed.<p> If an implementer provides <a href="Linker.html" title="interface in java.lang.foreign"><code>Linker</code></a><sup><a href="#preview-java.lang.foreign.Linker">PREVIEW</a></sup> implementations for multiple OS and processor combinations, then it is strongly recommended that the result of <a href="#defaultLookup()"><code>defaultLookup()</code></a> exposes, as much as possible, a consistent set of symbols across all the OS and processor combinations.                                       </p>                                         </dd> <dt>Returns:</dt><dd>a symbol lookup for symbols in a set of commonly used libraries.           </dd>  </dl>  </section>   <a end_ctx_id="method:defaultLookup()"/>     </td></tr></table></td></tr></table></diff></diffreport>