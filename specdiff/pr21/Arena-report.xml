<?xml version="1.0" encoding="UTF-8"?><diffreport><diff><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">class:Arena [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="class:Arena"/> <section class="class-description" id="class-description"><dl class="notes"> <dt>All Superinterfaces: </dt><dd> <code><a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>, <code><a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup></code>  </dd> </dl> <hr/><div class="type-signature"> <span class="modifiers">public interface   </span><span class="element-name type-name-label">Arena</span><span class="extends-implements"> extends <a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>, <a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>   </span> </div><div class="preview-block" id="preview-java.lang.foreign.Arena"> <span class="preview-label"><code>Arena</code> is a preview API of the Java platform.        </span><div class="preview-comment"> Programs can only use <code>Arena</code> when preview features are enabled.          </div><div class="preview-comment">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.                 </div> </div><div class="block"> An arena controls the lifecycle of <span class="diff-html-added">native</span> memory segments, providing both flexible allocation and timely deallocation.<p> An arena has a <a href="MemorySegment.Scope.html" title="interface in java.lang.foreign">scope</a><sup><a href="MemorySegment.Scope.html#preview-java.lang.foreign.MemorySegment.Scope"><span class="diff-html-removed">,</span> <span class="diff-html-removed">called</span><span class="diff-html-added">PREVIEW</span> </a></sup> <span class="diff-html-added">-</span> the <em>arena scope </em>. <span class="diff-html-removed">When</span><span class="diff-html-added">All</span> <span class="diff-html-added">the</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">are</span> <span class="diff-html-added">associated</span> <span class="diff-html-added">with</span> the arena <span class="diff-html-removed">is</span> <a href="#close()" changeType="diff-removed-tag"><span class="diff-html-removed">closed</span></a><span class="diff-html-added">scope.</span> <span class="diff-html-added">As</span> <span class="diff-html-added">such</span>, the <span class="diff-html-added">arena</span> <span class="diff-html-added">determines</span> <span class="diff-html-added">the</span> <span class="diff-html-added">temporal</span> <span class="diff-html-added">bounds</span> <span class="diff-html-added">of</span> <span class="diff-html-added">all</span> <span class="diff-html-added">the</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">by</span> <span class="diff-html-added">it.</span>                                      </p><p> <span class="diff-html-added">Moreover,</span> <span class="diff-html-added">an</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">also</span> <span class="diff-html-added">determines</span> <span class="diff-html-added">whether</span> <span class="diff-html-added">access</span> <span class="diff-html-added">to</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">by</span> <span class="diff-html-added">it</span> <span class="diff-html-added">should</span> <span class="diff-html-added">be</span> <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)"><span class="diff-html-added">restricted</span></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"><span class="diff-html-added">PREVIEW</span></a></sup> <span class="diff-html-added">to</span> <span class="diff-html-added">specific</span> <span class="diff-html-added">threads.</span> <span class="diff-html-added">An</span> arena <span class="diff-html-removed">scope</span>is <span class="diff-html-removed">no</span> <span class="diff-html-removed">longer</span> <a href="SegmentScope.html#isAlive()" changeType="diff-removed-tag"><span class="diff-html-removed">alive</span></a><span class="diff-html-added">a</span> <a href="SegmentAllocator.html" title="interface in java.lang.foreign"><code><span class="diff-html-added">SegmentAllocator</span></code></a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup> <span class="diff-html-added">and</span> <span class="diff-html-added">features</span> <span class="diff-html-added">several</span> <span class="diff-html-added">allocation</span> <span class="diff-html-added">methods</span> <span class="diff-html-added">that</span> <span class="diff-html-added">can</span> <span class="diff-html-added">be</span> <span class="diff-html-added">used</span> <span class="diff-html-added">by</span> <span class="diff-html-added">clients</span> <span class="diff-html-added">to</span> <span class="diff-html-added">obtain</span> <span class="diff-html-added">native</span> <span class="diff-html-added">segments.</span>                                         </p><p> <span class="diff-html-added">The</span> <span class="diff-html-added">simplest</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">is</span> <span class="diff-html-added">the</span> <a href="#global()"><span class="diff-html-added">global</span> <span class="diff-html-added">arena</span> </a><span class="diff-html-added">.</span> <span class="diff-html-added">The</span> <span class="diff-html-added">global</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">features</span> <span class="diff-html-added">an</span> <em><span class="diff-html-added">unbounded</span> <span class="diff-html-added">lifetime</span> </em>. As <span class="diff-html-removed">a</span> <span class="diff-html-removed">result,</span> <span class="diff-html-removed">all</span> <span class="diff-html-removed">the</span><span class="diff-html-added">such,</span> <span class="diff-html-added">native</span> segments <span class="diff-html-removed">associated</span><span class="diff-html-added">allocated</span> with the <span class="diff-html-added">global</span> arena <span class="diff-html-removed">scope</span>are <span class="diff-html-removed">invalidated,</span> <span class="diff-html-removed">safely</span><span class="diff-html-added">always</span> <span class="diff-html-added">accessible</span> and <span class="diff-html-removed">atomically,</span>their backing <span class="diff-html-added">regions</span> <span class="diff-html-added">of</span> memory <span class="diff-html-removed">regions</span>are <span class="diff-html-added">never</span> deallocated <span class="diff-html-removed">(where</span> <span class="diff-html-removed">applicable)</span> <span class="diff-html-removed">and</span><span class="diff-html-added">.</span> <span class="diff-html-added">Moreover,</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">global</span> <span class="diff-html-added">arena</span> can <span class="diff-html-removed">no</span> <span class="diff-html-removed">longer</span>be <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"> <span class="diff-html-removed">after</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">arena</span> <span class="diff-html-removed">is</span> <span class="diff-html-removed">closed:</span><span class="diff-html-added">PREVIEW</span>     </a></sup> <span class="diff-html-added">from</span> <span class="diff-html-added">any</span> <span class="diff-html-added">thread.</span>                                                       </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> <span class="diff-html-removed">try</span><span class="diff-html-added">MemorySegment</span> <span class="diff-html-removed">(Arenaarena</span><span class="diff-html-added">segment</span> = Arena.<span class="diff-html-removed">openConfined</span><span class="diff-html-added">global</span>()<span class="diff-html-removed">){MemorySegmentsegment=MemorySegment</span>.<span class="diff-html-removed">allocateNative</span><span class="diff-html-added">allocate</span>(100, <span class="diff-html-removed">arena.scope(</span><span class="diff-html-added">1</span>)<span class="diff-html-removed">)</span>;
 ...
 <span class="diff-html-removed">}</span>// <span class="diff-html-added">segment</span> <span class="diff-html-removed">memory</span><span class="diff-html-added">is</span> <span class="diff-html-removed">released</span><span class="diff-html-added">never</span> <span class="diff-html-removed">here</span><span class="diff-html-added">deallocated!</span>
</code>
                                </pre> </div><p> <span class="diff-html-removed">Furthermore,</span><span class="diff-html-added">Alternatively,</span> <span class="diff-html-added">clients</span> <span class="diff-html-added">can</span> <span class="diff-html-added">obtain</span> an <a href="#ofAuto()"><span class="diff-html-added">automatic</span> arena </a><span class="diff-html-added">,</span> <span class="diff-html-added">that</span> is <span class="diff-html-added">an</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">which</span> <span class="diff-html-added">features</span> a <em> <a href="SegmentAllocator.html" title="interface in java.lang.foreign" changeType="diff-removed-tag"><code><span class="diff-html-removed">SegmentAllocator</span></code><span class="diff-html-removed"/></a><sup changeType="diff-removed-tag"><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-removed">.</span> <span class="diff-html-removed">All</span><span class="diff-html-added">bounded</span> <span class="diff-html-added">lifetime</span>   </em> <span class="diff-html-added">that</span> <span class="diff-html-added">is</span> <span class="diff-html-added">managed,</span> <span class="diff-html-added">automatically,</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">garbage</span> <span class="diff-html-added">collector.</span> <span class="diff-html-added">As</span> <span class="diff-html-added">such,</span> the <span class="diff-html-added">regions</span> <span class="diff-html-added">of</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">backing</span> <span class="diff-html-added">memory</span> segments allocated <span class="diff-html-removed">by</span><span class="diff-html-added">with</span> the <span class="diff-html-added">automatic</span> arena are <span class="diff-html-removed">associated</span> <span class="diff-html-removed">with</span><span class="diff-html-added">deallocated</span> <span class="diff-html-added">at</span> <span class="diff-html-added">some</span> <span class="diff-html-added">unspecified</span> <span class="diff-html-added">time</span> <em><span class="diff-html-added">after</span></em> <span class="diff-html-added">the</span> <span class="diff-html-added">automatic</span> <span class="diff-html-added">allocator</span> <span class="diff-html-added">(and</span> <span class="diff-html-added">all</span> the <span class="diff-html-removed">arena</span> <span class="diff-html-removed">scope.</span> <span class="diff-html-removed">This</span> <span class="diff-html-removed">makes</span> <span class="diff-html-removed">arenas</span> <span class="diff-html-removed">extremely</span> <span class="diff-html-removed">useful</span> <span class="diff-html-removed">when</span> <span class="diff-html-removed">interacting</span> <span class="diff-html-removed">with</span> <span class="diff-html-removed">foreign</span> <span class="diff-html-removed">code</span><span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">by</span> <span class="diff-html-added">it)</span> <span class="diff-html-added">become</span> <a href="../../../java/lang/ref/package.html#reachability"><span class="diff-html-added">unreachable</span></a>, as shown below:                                                                      </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> <span class="diff-html-removed">try</span><span class="diff-html-added">MemorySegment</span> <span class="diff-html-removed">(Arenaarena</span><span class="diff-html-added">segment</span> = Arena.<span class="diff-html-removed">openConfined</span><span class="diff-html-added">ofAuto</span>()<span class="diff-html-added">.allocate(100,</span> <span class="diff-html-added">1</span>)<span class="diff-html-added">;</span>
 <span class="diff-html-added">...</span>
 <span class="diff-html-added">segment</span> <span class="diff-html-added">=</span> <span class="diff-html-removed">{</span><span class="diff-html-added">null;</span> <span class="diff-html-added">//</span> <span class="diff-html-added">the</span> <span class="diff-html-added">segment</span> <span class="diff-html-added">region</span> <span class="diff-html-added">becomes</span> <span class="diff-html-added">available</span> <span class="diff-html-added">for</span> <span class="diff-html-added">deallocation</span> <span class="diff-html-added">after</span> <span class="diff-html-added">this</span> <span class="diff-html-added">point</span>
</code>
                        <span class="diff-html-removed">MemorySegment</span>      <span class="diff-html-removed">nativeArray</span> <span class="diff-html-removed">=</span> </pre> </div> <span class="diff-html-added">Memory</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">an</span> <span class="diff-html-added">automatic</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">can</span> <span class="diff-html-added">also</span> <span class="diff-html-added">be</span> <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)"><span class="diff-html-added">accessed</span></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"><span class="diff-html-added">PREVIEW</span></a></sup> <span class="diff-html-added">from</span> <span class="diff-html-added">any</span> <span class="diff-html-added">thread.</span><p> <span class="diff-html-added">Rather</span> <span class="diff-html-added">than</span> <span class="diff-html-added">leaving</span> <span class="diff-html-added">deallocation</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">hands</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">Java</span> <span class="diff-html-added">runtime,</span> <span class="diff-html-added">clients</span> <span class="diff-html-added">will</span> <span class="diff-html-added">often</span> <span class="diff-html-added">wish</span> <span class="diff-html-added">to</span> <span class="diff-html-added">exercise</span> <span class="diff-html-added">control</span> <span class="diff-html-added">over</span> <span class="diff-html-added">the</span> <span class="diff-html-added">timing</span> <span class="diff-html-added">of</span> <span class="diff-html-added">deallocation</span> <span class="diff-html-added">for</span> <span class="diff-html-added">regions</span> <span class="diff-html-added">of</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">that</span> <span class="diff-html-added">back</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">segments.</span> <span class="diff-html-added">Two</span> <span class="diff-html-added">kinds</span> <span class="diff-html-added">of</span> <span class="diff-html-added">arenas</span> <span class="diff-html-added">support</span> <span class="diff-html-added">this,</span> <span class="diff-html-added">namely</span> <a href="#ofConfined()"><span class="diff-html-added">confined</span></a> <span class="diff-html-added">and</span> <a href="#ofShared()"><span class="diff-html-added">shared</span></a> <span class="diff-html-added">arenas.</span> <span class="diff-html-added">They</span> <span class="diff-html-added">both</span> <span class="diff-html-added">feature</span> <span class="diff-html-added">bounded</span> <span class="diff-html-added">lifetimes</span> <span class="diff-html-added">that</span> <span class="diff-html-added">are</span> <span class="diff-html-added">managed</span> <span class="diff-html-added">manually.</span> <span class="diff-html-added">For</span> <span class="diff-html-added">instance,</span> <span class="diff-html-added">the</span> <span class="diff-html-added">lifetime</span> <span class="diff-html-added">of</span> <span class="diff-html-added">a</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">starts</span> <span class="diff-html-added">when</span> <span class="diff-html-added">the</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">is</span> <span class="diff-html-added">created,</span> <span class="diff-html-added">and</span> <span class="diff-html-added">ends</span> <span class="diff-html-added">when</span> <span class="diff-html-added">the</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">is</span> <a href="#close()"><span class="diff-html-added">closed</span></a><span class="diff-html-added">.</span> <span class="diff-html-added">As</span> <span class="diff-html-added">a</span> <span class="diff-html-added">result,</span> <span class="diff-html-added">the</span> <span class="diff-html-added">regions</span> <span class="diff-html-added">of</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">backing</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">a</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">are</span> <span class="diff-html-added">deallocated</span> <span class="diff-html-added">when</span> <span class="diff-html-added">the</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">is</span> <span class="diff-html-added">closed.</span> <span class="diff-html-added">When</span> <span class="diff-html-added">this</span> <span class="diff-html-added">happens,</span> <span class="diff-html-added">all</span> <span class="diff-html-added">the</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">confined</span> arena <span class="diff-html-removed">.allocateArray(ValueLayout.JAVA_INT,</span><span class="diff-html-added">are</span> <span class="diff-html-added">invalidated,</span> <span class="diff-html-added">and</span> <span class="diff-html-added">subsequent</span> <span class="diff-html-added">access</span> <span class="diff-html-added">operations</span> <span class="diff-html-added">on</span> <span class="diff-html-added">these</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">will</span> <span class="diff-html-added">fail</span> <a href="../IllegalStateException.html" title="class in java.lang"><code><span class="diff-html-added">IllegalStateException</span></code></a><span class="diff-html-added">:</span>                                                                                                                        </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!"><span class="diff-html-added">Copy</span></span><span class="diff-html-added"><img src="../../../../copy.svg" alt="Copy" changeType="diff-added-image"/></span></button><pre class="snippet">
                                    <code class="language-java"> <span class="diff-html-removed">0,1,2,3,4,5,6,7,8,9);</span>MemorySegment <span class="diff-html-removed">nativeString</span><span class="diff-html-added">segment</span> = <span class="diff-html-added">null;</span>
 <span class="diff-html-added">try</span> <span class="diff-html-added">(Arena</span> arena <span class="diff-html-added">=</span> <span class="diff-html-added">Arena</span>.<span class="diff-html-removed">allocateUtf8String</span><span class="diff-html-added">ofConfined</span>(<span class="diff-html-removed">"Hello!"</span><span class="diff-html-added">)</span>) <span class="diff-html-removed">;</span><span class="diff-html-added">{</span>
     <span class="diff-html-removed">MemorySegmentupcallStub</span><span class="diff-html-added">segment</span> = <span class="diff-html-removed">linker.upcallStub(handle,desc,</span>arena.<span class="diff-html-removed">scope</span><span class="diff-html-added">allocate</span>(<span class="diff-html-added">100</span>)<span class="diff-html-removed">)</span>;
     ...
 } // <span class="diff-html-added">segment</span> <span class="diff-html-removed">memory</span><span class="diff-html-added">region</span> <span class="diff-html-removed">released</span><span class="diff-html-added">deallocated</span> here
 <span class="diff-html-added">segment.get(ValueLayout.JAVA_BYTE,</span> <span class="diff-html-added">0);</span> <span class="diff-html-added">//</span> <span class="diff-html-added">throws</span> <span class="diff-html-added">IllegalStateException</span>
</code>
                                </pre> </div> <span class="diff-html-added">Memory</span> <span class="diff-html-added">segments</span> <span class="diff-html-added">allocated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">a</span> <a href="#ofConfined()"><span class="diff-html-added">confined</span> <span class="diff-html-added">arena</span> </a> <span class="diff-html-added">can</span> <span class="diff-html-added">only</span> <span class="diff-html-added">be</span> <span class="diff-html-added">accessed</span> <span class="diff-html-added">(and</span> <span class="diff-html-added">closed)</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">thread</span> <span class="diff-html-added">that</span> <span class="diff-html-added">created</span> <span class="diff-html-added">the</span> <span class="diff-html-added">arena.</span> <span class="diff-html-added">If</span> <span class="diff-html-added">access</span> <span class="diff-html-added">to</span> <span class="diff-html-added">a</span> <span class="diff-html-added">memory</span> <span class="diff-html-added">segment</span> <span class="diff-html-added">from</span> <span class="diff-html-added">multiple</span> <span class="diff-html-added">threads</span> <span class="diff-html-added">is</span> <span class="diff-html-added">required,</span> <span class="diff-html-added">clients</span> <span class="diff-html-added">can</span> <span class="diff-html-added">allocate</span> <span class="diff-html-added">segment</span> <span class="diff-html-added">in</span> <span class="diff-html-added">a</span> <a href="#ofShared()"><span class="diff-html-added">shared</span> <span class="diff-html-added">arena</span> </a> <span class="diff-html-added">instead.</span><p> <span class="diff-html-added">The</span> <span class="diff-html-added">characteristics</span> <span class="diff-html-added">of</span> <span class="diff-html-added">the</span> <span class="diff-html-added">various</span> <span class="diff-html-added">arenas</span> <span class="diff-html-added">are</span> <span class="diff-html-added">summarized</span> <span class="diff-html-added">in</span> <span class="diff-html-added">the</span> <span class="diff-html-added">following</span> <span class="diff-html-added">table:</span>            </p><blockquote><table class="plain"> <caption style="display:none"><span class="diff-html-added">Arenas</span> <span class="diff-html-added">characteristics</span> </caption> <thead><tr><th scope="col"><span class="diff-html-added">Kind</span></th><th scope="col"><span class="diff-html-added">Bounded</span> <span class="diff-html-added">lifetime</span> </th><th scope="col"><span class="diff-html-added">Explicitly</span> <span class="diff-html-added">closeable</span> </th><th scope="col"><span class="diff-html-added">Accessible</span> <span class="diff-html-added">from</span> <span class="diff-html-added">multiple</span> <span class="diff-html-added">threads</span>   </th></tr>  </thead><tbody><tr><th scope="row" style="font-weight:normal"><span class="diff-html-added">Global</span></th><td style="text-align:center;"><span class="diff-html-added">No</span></td><td style="text-align:center;"><span class="diff-html-added">No</span></td><td style="text-align:center;"><span class="diff-html-added">Yes</span></td></tr><tr><th scope="row" style="font-weight:normal"><span class="diff-html-added">Automatic</span></th><td style="text-align:center;"><span class="diff-html-added">Yes</span></td><td style="text-align:center;"><span class="diff-html-added">No</span></td><td style="text-align:center;"><span class="diff-html-added">Yes</span></td></tr><tr><th scope="row" style="font-weight:normal"><span class="diff-html-added">Confined</span></th><td style="text-align:center;"><span class="diff-html-added">Yes</span></td><td style="text-align:center;"><span class="diff-html-added">Yes</span></td><td style="text-align:center;"><span class="diff-html-added">No</span></td></tr><tr><th scope="row" style="font-weight:normal"><span class="diff-html-added">Shared</span></th><td style="text-align:center;"><span class="diff-html-added">Yes</span></td><td style="text-align:center;"><span class="diff-html-added">Yes</span></td><td style="text-align:center;"><span class="diff-html-added">Yes</span></td></tr></tbody>  </table></blockquote><h2 id="thread-confinement">Safety and thread-confinement  </h2> Arenas provide strong temporal safety guarantees: a memory segment allocated by an arena cannot be accessed <em>after</em> the arena has been closed. The cost of providing this guarantee varies based on the number of threads that have access to the memory segments allocated by the arena. For instance, if an arena is always created and closed by one thread, and the memory segments <span class="diff-html-removed">associated</span> <span class="diff-html-removed">with</span><span class="diff-html-added">allocated</span> <span class="diff-html-added">by</span> the arena <span class="diff-html-removed">'s</span> <span class="diff-html-removed">scope</span>are always accessed by that same thread, then ensuring correctness is trivial.<p> Conversely, if an arena allocates segments that can be accessed by multiple threads, or if the arena can be closed by a thread other than the accessing thread, then ensuring correctness is much more complex. For example, a segment allocated with the arena might be accessed <em>while</em> another thread attempts, concurrently, to close the arena. To provide the strong temporal safety guarantee without forcing every client, even simple ones, to incur a performance impact, arenas are divided into <em>thread-confined</em> arenas, and <em>shared</em> arenas.                                                                                   </p><p> Confined arenas, support strong thread-confinement guarantees. Upon creation, they are assigned an <em>owner thread </em>, typically the thread which initiated the creation operation. The segments created by a confined arena can only be <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> by the owner thread. Moreover, any attempt to close the confined arena from a thread other than the owner thread will fail with <a href="../WrongThreadException.html" title="class in java.lang"><code>WrongThreadException</code></a>.                                                        </p><p> Shared arenas, on the other hand, have no owner thread. The segments created by a shared arena can be <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> by any thread. This might be useful when multiple threads need to access the same memory segment concurrently (e.g. in the case of parallel processing). Moreover, a shared arena can be closed by any thread.                                                       </p>                                                                                                                                                     </div><dl class="notes"> <dt><span class="diff-html-added">Implementation</span> <span class="diff-html-added">Requirements:</span> </dt><dd><span class="diff-html-added">Implementations</span> <span class="diff-html-added">of</span> <span class="diff-html-added">this</span> <span class="diff-html-added">interface</span> <span class="diff-html-added">are</span> <span class="diff-html-added">thread-safe.</span>     </dd> <dt>Since:</dt><dd>20</dd> <dt><span class="diff-html-added">See</span> <span class="diff-html-added">Also:</span> </dt><dd><ul class="tag-list"><li> <a href="MemorySegment.html" title="interface in java.lang.foreign"><code><span class="diff-html-added">MemorySegment</span></code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"><span class="diff-html-added">PREVIEW</span></a></sup> </li></ul></dd>   </dl>   </section> <a end_ctx_id="class:Arena"/>   </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="class:Arena"/> <section class="class-description" id="class-description"><dl class="notes"> <dt>All Superinterfaces: </dt><dd> <code><a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>, <code><a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup></code>  </dd> </dl> <hr/><div class="type-signature"> <span class="modifiers">public interface   </span><span class="element-name type-name-label">Arena</span><span class="extends-implements"> extends <a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>, <a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>   </span> </div><div class="preview-block" id="preview-java.lang.foreign.Arena"> <span class="preview-label"><code>Arena</code> is a preview API of the Java platform.        </span><div class="preview-comment"> Programs can only use <code>Arena</code> when preview features are enabled.          </div><div class="preview-comment">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.                 </div> </div><div class="block"> An arena controls the lifecycle of memory segments, providing both flexible allocation and timely deallocation.<p> An arena has a <a href="#scope()">scope</a>, called the arena scope. When the arena is <a href="#close()" changeType="diff-removed-tag">closed</a>, the arena scope is no longer <a href="SegmentScope.html#isAlive()" changeType="diff-removed-tag">alive</a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup>. As a result, all the segments associated with the arena scope are invalidated, safely and atomically, their backing memory regions are deallocated (where applicable) and can no longer be accessed after the arena is closed:                                                        </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> try (Arena arena = Arena.openConfined()) {
     MemorySegment segment = MemorySegment.allocateNative(100, arena.scope());
     ...
 } // memory released here
</code>
                                </pre> </div> Furthermore, an arena is a <a href="SegmentAllocator.html" title="interface in java.lang.foreign" changeType="diff-removed-tag"><code>SegmentAllocator</code></a><sup changeType="diff-removed-tag"><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>. All the segments <a href="#allocate(long,long)">allocated</a> by the arena are associated with the arena scope. This makes arenas extremely useful when interacting with foreign code, as shown below:<div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> try (Arena arena = Arena.openConfined()) {
     MemorySegment nativeArray = arena.allocateArray(ValueLayout.JAVA_INT, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
     MemorySegment nativeString = arena.allocateUtf8String("Hello!");
     MemorySegment upcallStub = linker.upcallStub(handle, desc, arena.scope());
     ...
 } // memory released here
</code>
                                </pre> </div><h2 id="thread-confinement">Safety and thread-confinement  </h2> Arenas provide strong temporal safety guarantees: a memory segment allocated by an arena cannot be accessed <em>after</em> the arena has been closed. The cost of providing this guarantee varies based on the number of threads that have access to the memory segments allocated by the arena. For instance, if an arena is always created and closed by one thread, and the memory segments associated with the arena's scope are always accessed by that same thread, then ensuring correctness is trivial.<p> Conversely, if an arena allocates segments that can be accessed by multiple threads, or if the arena can be closed by a thread other than the accessing thread, then ensuring correctness is much more complex. For example, a segment allocated with the arena might be accessed <em>while</em> another thread attempts, concurrently, to close the arena. To provide the strong temporal safety guarantee without forcing every client, even simple ones, to incur a performance impact, arenas are divided into <em>thread-confined</em> arenas, and <em>shared</em> arenas.                                                                                   </p><p> Confined arenas, support strong thread-confinement guarantees. Upon creation, they are assigned an <a href="#isCloseableBy(java.lang.Thread)">owner thread </a>, typically the thread which initiated the creation operation. The segments created by a confined arena can only be <a href="SegmentScope.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup> by the owner thread. Moreover, any attempt to close the confined arena from a thread other than the owner thread will fail with <a href="../WrongThreadException.html" title="class in java.lang"><code>WrongThreadException</code></a>.                                                        </p><p> Shared arenas, on the other hand, have no owner thread. The segments created by a shared arena can be <a href="SegmentScope.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup> by any thread. This might be useful when multiple threads need to access the same memory segment concurrently (e.g. in the case of parallel processing). Moreover, a shared arena <a href="#isCloseableBy(java.lang.Thread)">can be closed  </a> by any thread.                                                     </p>                                                                                                                               </div><dl class="notes"> <dt>Since:</dt><dd>20</dd> </dl>   </section> <a end_ctx_id="class:Arena"/>   </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="class:Arena"/> <section class="class-description" id="class-description"><dl class="notes"> <dt>All Superinterfaces: </dt><dd> <code><a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>, <code><a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup></code>  </dd> </dl> <hr/><div class="type-signature"> <span class="modifiers">public interface   </span><span class="element-name type-name-label">Arena</span><span class="extends-implements"> extends <a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup>, <a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a>   </span> </div><div class="preview-block" id="preview-java.lang.foreign.Arena"> <span class="preview-label"><code>Arena</code> is a preview API of the Java platform.        </span><div class="preview-comment"> Programs can only use <code>Arena</code> when preview features are enabled.          </div><div class="preview-comment">Preview features may be removed in a future release, or upgraded to permanent features of the Java platform.                 </div> </div><div class="block"> An arena controls the lifecycle of native memory segments, providing both flexible allocation and timely deallocation.<p> An arena has a <a href="MemorySegment.Scope.html" title="interface in java.lang.foreign">scope</a><sup><a href="MemorySegment.Scope.html#preview-java.lang.foreign.MemorySegment.Scope">PREVIEW</a></sup> - the <em>arena scope </em>. All the segments allocated by the arena are associated with the arena scope. As such, the arena determines the temporal bounds of all the memory segments allocated by it.                                     </p><p> Moreover, an arena also determines whether access to memory segments allocated by it should be <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)">restricted</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> to specific threads. An arena is a <a href="SegmentAllocator.html" title="interface in java.lang.foreign"><code>SegmentAllocator</code></a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup> and features several allocation methods that can be used by clients to obtain native segments.                                       </p><p> The simplest arena is the <a href="#global()">global arena </a>. The global arena features an <em>unbounded lifetime </em>. As such, native segments allocated with the global arena are always accessible and their backing regions of memory are never deallocated. Moreover, memory segments allocated with the global arena can be <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> from any thread.                                               </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> MemorySegment segment = Arena.global().allocate(100, 1);
 ...
 // segment is never deallocated!
</code>
                                </pre> </div><p> Alternatively, clients can obtain an <a href="#ofAuto()">automatic arena </a>, that is an arena which features a <em>bounded lifetime </em> that is managed, automatically, by the garbage collector. As such, the regions of memory backing memory segments allocated with the automatic arena are deallocated at some unspecified time <em>after</em> the automatic allocator (and all the segments allocated by it) become <a href="../../../java/lang/ref/package.html#reachability">unreachable</a>, as shown below:                                                          </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> MemorySegment segment = Arena.ofAuto().allocate(100, 1);
 ...
 segment = null; // the segment region becomes available for deallocation after this point
</code>
                                </pre> </div> Memory segments allocated with an automatic arena can also be <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> from any thread.<p> Rather than leaving deallocation in the hands of the Java runtime, clients will often wish to exercise control over the timing of deallocation for regions of memory that back memory segments. Two kinds of arenas support this, namely <a href="#ofConfined()">confined</a> and <a href="#ofShared()">shared</a> arenas. They both feature bounded lifetimes that are managed manually. For instance, the lifetime of a confined arena starts when the confined arena is created, and ends when the confined arena is <a href="#close()">closed</a>. As a result, the regions of memory backing memory segments allocated with a confined arena are deallocated when the confined arena is closed. When this happens, all the segments allocated with the confined arena are invalidated, and subsequent access operations on these segments will fail <a href="../IllegalStateException.html" title="class in java.lang"><code>IllegalStateException</code></a>:                                                                                                                        </p><div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                    <code class="language-java"> MemorySegment segment = null;
 try (Arena arena = Arena.ofConfined()) {
     segment = arena.allocate(100);
     ...
 } // segment region deallocated here
 segment.get(ValueLayout.JAVA_BYTE, 0); // throws IllegalStateException
</code>
                                </pre> </div> Memory segments allocated with a <a href="#ofConfined()">confined arena </a> can only be accessed (and closed) by the thread that created the arena. If access to a memory segment from multiple threads is required, clients can allocate segment in a <a href="#ofShared()">shared arena </a> instead.<p> The characteristics of the various arenas are summarized in the following table:            </p><blockquote><table class="plain"> <caption style="display:none">Arenas characteristics </caption> <thead><tr><th scope="col">Kind</th><th scope="col">Bounded lifetime </th><th scope="col">Explicitly closeable </th><th scope="col">Accessible from multiple threads   </th></tr>  </thead><tbody><tr><th scope="row" style="font-weight:normal">Global</th><td style="text-align:center;">No</td><td style="text-align:center;">No</td><td style="text-align:center;">Yes</td></tr><tr><th scope="row" style="font-weight:normal">Automatic</th><td style="text-align:center;">Yes</td><td style="text-align:center;">No</td><td style="text-align:center;">Yes</td></tr><tr><th scope="row" style="font-weight:normal">Confined</th><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes</td><td style="text-align:center;">No</td></tr><tr><th scope="row" style="font-weight:normal">Shared</th><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes</td></tr></tbody>  </table></blockquote><h2 id="thread-confinement">Safety and thread-confinement  </h2> Arenas provide strong temporal safety guarantees: a memory segment allocated by an arena cannot be accessed <em>after</em> the arena has been closed. The cost of providing this guarantee varies based on the number of threads that have access to the memory segments allocated by the arena. For instance, if an arena is always created and closed by one thread, and the memory segments allocated by the arena are always accessed by that same thread, then ensuring correctness is trivial.<p> Conversely, if an arena allocates segments that can be accessed by multiple threads, or if the arena can be closed by a thread other than the accessing thread, then ensuring correctness is much more complex. For example, a segment allocated with the arena might be accessed <em>while</em> another thread attempts, concurrently, to close the arena. To provide the strong temporal safety guarantee without forcing every client, even simple ones, to incur a performance impact, arenas are divided into <em>thread-confined</em> arenas, and <em>shared</em> arenas.                                                                                   </p><p> Confined arenas, support strong thread-confinement guarantees. Upon creation, they are assigned an <em>owner thread </em>, typically the thread which initiated the creation operation. The segments created by a confined arena can only be <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> by the owner thread. Moreover, any attempt to close the confined arena from a thread other than the owner thread will fail with <a href="../WrongThreadException.html" title="class in java.lang"><code>WrongThreadException</code></a>.                                                        </p><p> Shared arenas, on the other hand, have no owner thread. The segments created by a shared arena can be <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)">accessed</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> by any thread. This might be useful when multiple threads need to access the same memory segment concurrently (e.g. in the case of parallel processing). Moreover, a shared arena can be closed by any thread.                                                       </p>                                                                                                                                                   </div><dl class="notes"> <dt>Implementation Requirements: </dt><dd>Implementations of this interface are thread-safe.     </dd> <dt>Since:</dt><dd>20</dd> <dt>See Also: </dt><dd><ul class="tag-list"><li> <a href="MemorySegment.html" title="interface in java.lang.foreign"><code>MemorySegment</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> </li></ul></dd>   </dl>   </section> <a end_ctx_id="class:Arena"/>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ofAuto() [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"><li> <a start_ctx_id="method:ofAuto()"><span class="diff-html-added"/></a> <section class="detail" id="ofAuto()"><h3><span class="diff-html-added">ofAuto</span></h3><div class="member-signature"> <span class="modifiers"><span class="diff-html-added">static</span></span> <span class="return-type"><a href="Arena.html" title="interface in java.lang.foreign"><span class="diff-html-added">Arena</span></a><sup><a href="#preview-java.lang.foreign.Arena"><span class="diff-html-added">PREVIEW</span></a></sup></span> <span class="element-name"><span class="diff-html-added">ofAuto</span></span><span class="diff-html-added">()</span> </div><div class="block"> <span class="diff-html-added">Creates</span> <span class="diff-html-added">a</span> <span class="diff-html-added">new</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">that</span> <span class="diff-html-added">is</span> <span class="diff-html-added">managed,</span> <span class="diff-html-added">automatically,</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">garbage</span> <span class="diff-html-added">collector.</span> <span class="diff-html-added">Segments</span> <span class="diff-html-added">obtained</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">can</span> <span class="diff-html-added">be</span> <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)"><span class="diff-html-added">accessed</span></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"><span class="diff-html-added">PREVIEW</span></a></sup> <span class="diff-html-added">by</span> <span class="diff-html-added">any</span> <span class="diff-html-added">thread.</span> <span class="diff-html-added">Calling</span> <a href="#close()"><code><span class="diff-html-added">close()</span></code></a> <span class="diff-html-added">on</span> <span class="diff-html-added">the</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">will</span> <span class="diff-html-added">result</span> <span class="diff-html-added">in</span> <span class="diff-html-added">an</span> <a href="../UnsupportedOperationException.html" title="class in java.lang"><code><span class="diff-html-added">UnsupportedOperationException</span></code></a><span class="diff-html-added">.</span>                                   </div><dl class="notes"> <dt><span class="diff-html-added">Returns:</span></dt><dd><span class="diff-html-added">a</span> <span class="diff-html-added">new</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">that</span> <span class="diff-html-added">is</span> <span class="diff-html-added">managed,</span> <span class="diff-html-added">automatically,</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">garbage</span> <span class="diff-html-added">collector.</span>          </dd> </dl>  </section>  </li> <a end_ctx_id="method:ofAuto()"><span class="diff-html-added"/></a> </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:global() [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:global()"><span class="diff-html-added"/></a> <section class="detail" id="global()"><h3><span class="diff-html-added">global</span></h3><div class="member-signature"> <span class="modifiers"><span class="diff-html-added">static</span></span> <span class="return-type"><a href="Arena.html" title="interface in java.lang.foreign"><span class="diff-html-added">Arena</span></a><sup><a href="#preview-java.lang.foreign.Arena"><span class="diff-html-added">PREVIEW</span></a></sup></span> <span class="element-name"><span class="diff-html-added">global</span></span><span class="diff-html-added">()</span> </div><div class="block"> <span class="diff-html-added">Obtains</span> <span class="diff-html-added">the</span> <span class="diff-html-added">global</span> <span class="diff-html-added">arena.</span> <span class="diff-html-added">Segments</span> <span class="diff-html-added">obtained</span> <span class="diff-html-added">with</span> <span class="diff-html-added">the</span> <span class="diff-html-added">global</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">can</span> <span class="diff-html-added">be</span> <a href="MemorySegment.html#isAccessibleBy(java.lang.Thread)"><span class="diff-html-added">accessed</span></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"><span class="diff-html-added">PREVIEW</span></a></sup> <span class="diff-html-added">by</span> <span class="diff-html-added">any</span> <span class="diff-html-added">thread.</span> <span class="diff-html-added">Calling</span> <a href="#close()"><code><span class="diff-html-added">close()</span></code></a> <span class="diff-html-added">on</span> <span class="diff-html-added">the</span> <span class="diff-html-added">returned</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">will</span> <span class="diff-html-added">result</span> <span class="diff-html-added">in</span> <span class="diff-html-added">an</span> <a href="../UnsupportedOperationException.html" title="class in java.lang"><code><span class="diff-html-added">UnsupportedOperationException</span></code></a><span class="diff-html-added">.</span>                           </div><dl class="notes"> <dt><span class="diff-html-added">Returns:</span></dt><dd><span class="diff-html-added">the</span> <span class="diff-html-added">global</span> <span class="diff-html-added">arena.</span>  </dd> </dl>  </section> <a end_ctx_id="method:global()"><span class="diff-html-added"/></a>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ofConfined() [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ofConfined()"><span class="diff-html-added"/></a> <section class="detail" id="ofConfined()"><h3><span class="diff-html-added">ofConfined</span></h3><div class="member-signature"> <span class="modifiers"><span class="diff-html-added">static</span></span> <span class="return-type"><a href="Arena.html" title="interface in java.lang.foreign"><span class="diff-html-added">Arena</span></a><sup><a href="#preview-java.lang.foreign.Arena"><span class="diff-html-added">PREVIEW</span></a></sup></span> <span class="element-name"><span class="diff-html-added">ofConfined</span></span><span class="diff-html-added">()</span> </div><div class="block"><span class="diff-html-added">Returns</span> <span class="diff-html-added">a</span> <span class="diff-html-added">new</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena,</span> <span class="diff-html-added">owned</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">current</span> <span class="diff-html-added">thread.</span>         </div><dl class="notes"> <dt><span class="diff-html-added">Returns:</span></dt><dd><span class="diff-html-added">a</span> <span class="diff-html-added">new</span> <span class="diff-html-added">confined</span> <span class="diff-html-added">arena,</span> <span class="diff-html-added">owned</span> <span class="diff-html-added">by</span> <span class="diff-html-added">the</span> <span class="diff-html-added">current</span> <span class="diff-html-added">thread</span>        </dd> </dl>  </section> <a end_ctx_id="method:ofConfined()"><span class="diff-html-added"/></a>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:ofShared() [ADDED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:ofShared()"><span class="diff-html-added"/></a> <section class="detail" id="ofShared()"><h3><span class="diff-html-added">ofShared</span></h3><div class="member-signature"> <span class="modifiers"><span class="diff-html-added">static</span></span> <span class="return-type"><a href="Arena.html" title="interface in java.lang.foreign"><span class="diff-html-added">Arena</span></a><sup><a href="#preview-java.lang.foreign.Arena"><span class="diff-html-added">PREVIEW</span></a></sup></span> <span class="element-name"><span class="diff-html-added">ofShared</span></span><span class="diff-html-added">()</span> </div><div class="block"><span class="diff-html-added">Returns</span> <span class="diff-html-added">a</span> <span class="diff-html-added">new</span> <span class="diff-html-added">shared</span> <span class="diff-html-added">arena.</span>    </div><dl class="notes"> <dt><span class="diff-html-added">Returns:</span></dt><dd><span class="diff-html-added">a</span> <span class="diff-html-added">new</span> <span class="diff-html-added">shared</span> <span class="diff-html-added">arena</span>   </dd> </dl>  </section> <a end_ctx_id="method:ofShared()"><span class="diff-html-added"/></a>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:allocate(long,long) [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:allocate(long,long)"/> <section class="detail" id="allocate(long,long)"><h3>allocate</h3><div class="member-signature"> <span class="modifiers">default</span> <span class="return-type"><a href="MemorySegment.html" title="interface in java.lang.foreign">MemorySegment</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup></span> <span class="element-name">allocate</span> <wbr/> <span class="parameters">(long byteSize, long byteAlignment) </span>   </div><div class="block"> Returns a native memory segment with the given size (in bytes) and alignment constraint (in bytes). The returned segment is associated with <span class="diff-html-removed">the</span><span class="diff-html-added">this</span> <a href="#scope()">arena scope </a>. The segment's <a href="MemorySegment.html#address()"><code>address</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> is the starting address of the allocated off-heap memory region backing the segment, and the address is aligned according the provided alignment constraint.                                                  </div><dl class="notes"> <dt>Specified by: </dt><dd> <code><a href="SegmentAllocator.html#allocate(long,long)">allocate</a></code> in interface <code><a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup></code>  </dd> <dt>Implementation Requirements: </dt><dd> <span class="diff-html-removed">The</span> <span class="diff-html-removed">default</span> <span class="diff-html-removed">implementation</span> <span class="diff-html-removed">of</span> <span class="diff-html-removed">this</span> <span class="diff-html-removed">method</span> <span class="diff-html-removed">is</span> <span class="diff-html-removed">equivalent</span> <span class="diff-html-removed">to</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">following</span> <span class="diff-html-removed">code:</span><div class="snippet-container" changeType="diff-removed-tag"> <button class="copy snippet-copy"><span data-copied="Copied!"><span class="diff-html-removed">Copy</span></span><span class="diff-html-removed"><img src="../../../../copy.svg" alt="Copy" changeType="diff-removed-image"/></span><span class="diff-html-removed"/></button><pre class="snippet"><span class="diff-html-removed">
                                                                </span><code class="language-java"><span class="diff-html-removed"> MemorySegment.allocateNative(bytesSize, byteAlignment, scope());
</span></code><span class="diff-html-removed">
                                                            </span></pre> </div> <span class="diff-html-removed">More</span> <span class="diff-html-removed">generally</span> <span class="diff-html-removed">implementations</span><span class="diff-html-added">Implementations</span> of this method must return a native segment featuring the requested size, and that is compatible with the provided alignment constraint. Furthermore, for any two segments <code>S1, S2 </code> returned by this method, the following invariant must hold:<div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                                                <code class="language-java"> S1.overlappingSlice(S2).isEmpty() == true
</code>
                                                            </pre> </div>                                                   </dd> <dt>Parameters:</dt><dd> <code>byteSize</code> - the size (in bytes) of the off-heap memory block backing the native memory segment.                </dd><dd> <code>byteAlignment</code> - the alignment constraint (in bytes) of the off-heap region of memory backing the native memory segment.                  </dd> <dt>Returns:</dt><dd>a new native memory segment.    </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>bytesSize &lt; 0  </code>, <code>alignmentBytes &lt;= 0  </code>, or if <code>alignmentBytes</code> is not a power of 2.              </dd><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if <span class="diff-html-removed">the</span><span class="diff-html-added">this</span> arena has already been <a href="#close()">closed</a>.         </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang">WrongThreadException</a></code> - if this <span class="diff-html-added">arena</span> <span class="diff-html-added">is</span> <span class="diff-html-added">confined,</span> <span class="diff-html-added">and</span> <span class="diff-html-added">this</span> method is called from a thread <code>T</code> <span class="diff-html-removed">,</span> <span class="diff-html-removed">such</span> <span class="diff-html-removed">that</span> <code changeType="diff-removed-tag"><span class="diff-html-removed">scope().isAccessibleBy(T)</span> <span class="diff-html-removed">==</span> <span class="diff-html-removed">false</span>  </code><span class="diff-html-removed">.</span> <dt changeType="diff-removed-tag"><span class="diff-html-removed">See</span> <span class="diff-html-removed">Also:</span> </dt><dd changeType="diff-removed-tag"><ul class="tag-list-long"><li> <a href="MemorySegment.html#allocateNative(long,long,java.lang.foreign.SegmentScope)"><code><span class="diff-html-removed">MemorySegment.allocateNative(long,</span> <span class="diff-html-removed">long,</span> <span class="diff-html-removed">SegmentScope)</span>  </code><span class="diff-html-removed"/></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup> </li></ul></dd><span class="diff-html-added">other</span> <span class="diff-html-added">than</span> <span class="diff-html-added">the</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">owner</span> <span class="diff-html-added">thread.</span>                          </dd>     </dl>  </section> <a end_ctx_id="method:allocate(long,long)"/>   </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"><li> <a start_ctx_id="method:allocate(long,long)"/> <section class="detail" id="allocate(long,long)"><h3>allocate</h3><div class="member-signature"> <span class="modifiers">default</span> <span class="return-type"><a href="MemorySegment.html" title="interface in java.lang.foreign">MemorySegment</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup></span> <span class="element-name">allocate</span> <wbr/> <span class="parameters">(long byteSize, long byteAlignment) </span>   </div><div class="block"> Returns a native memory segment with the given size (in bytes) and alignment constraint (in bytes). The returned segment is associated with the arena scope. The segment's <a href="MemorySegment.html#address()"><code>address</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> is the starting address of the allocated off-heap memory region backing the segment, and the address is aligned according the provided alignment constraint.                                                   </div><dl class="notes"> <dt>Specified by: </dt><dd> <code><a href="SegmentAllocator.html#allocate(long,long)">allocate</a></code> in interface <code><a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup></code>  </dd> <dt>Implementation Requirements: </dt><dd> The default implementation of this method is equivalent to the following code:<div class="snippet-container" changeType="diff-removed-tag"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                                                <code class="language-java"> MemorySegment.allocateNative(bytesSize, byteAlignment, scope());
</code>
                                                            </pre> </div> More generally implementations of this method must return a native segment featuring the requested size, and that is compatible with the provided alignment constraint. Furthermore, for any two segments <code>S1, S2 </code> returned by this method, the following invariant must hold:<div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                                                <code class="language-java"> S1.overlappingSlice(S2).isEmpty() == true
</code>
                                                            </pre> </div>                                                   </dd> <dt>Parameters:</dt><dd> <code>byteSize</code> - the size (in bytes) of the off-heap memory block backing the native memory segment.                </dd><dd> <code>byteAlignment</code> - the alignment constraint (in bytes) of the off-heap region of memory backing the native memory segment.                  </dd> <dt>Returns:</dt><dd>a new native memory segment.    </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>bytesSize &lt; 0  </code>, <code>alignmentBytes &lt;= 0  </code>, or if <code>alignmentBytes</code> is not a power of 2.              </dd><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the arena has already been <a href="#close()">closed</a>.         </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang">WrongThreadException</a></code> - if this method is called from a thread <code>T</code>, such that <code changeType="diff-removed-tag">scope().isAccessibleBy(T) == false  </code>.              </dd> <dt changeType="diff-removed-tag">See Also: </dt><dd changeType="diff-removed-tag"><ul class="tag-list-long"><li> <a href="MemorySegment.html#allocateNative(long,long,java.lang.foreign.SegmentScope)"><code>MemorySegment.allocateNative(long, long, SegmentScope)  </code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> </li></ul></dd>      </dl>  </section>  </li> <a end_ctx_id="method:allocate(long,long)"/> </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:allocate(long,long)"/> <section class="detail" id="allocate(long,long)"><h3>allocate</h3><div class="member-signature"> <span class="modifiers">default</span> <span class="return-type"><a href="MemorySegment.html" title="interface in java.lang.foreign">MemorySegment</a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup></span> <span class="element-name">allocate</span> <wbr/> <span class="parameters">(long byteSize, long byteAlignment) </span>   </div><div class="block"> Returns a native memory segment with the given size (in bytes) and alignment constraint (in bytes). The returned segment is associated with this <a href="#scope()">arena scope </a>. The segment's <a href="MemorySegment.html#address()"><code>address</code></a><sup><a href="MemorySegment.html#preview-java.lang.foreign.MemorySegment">PREVIEW</a></sup> is the starting address of the allocated off-heap memory region backing the segment, and the address is aligned according the provided alignment constraint.                                                  </div><dl class="notes"> <dt>Specified by: </dt><dd> <code><a href="SegmentAllocator.html#allocate(long,long)">allocate</a></code> in interface <code><a href="SegmentAllocator.html" title="interface in java.lang.foreign">SegmentAllocator</a><sup><a href="SegmentAllocator.html#preview-java.lang.foreign.SegmentAllocator">PREVIEW</a></sup></code>  </dd> <dt>Implementation Requirements: </dt><dd> Implementations of this method must return a native segment featuring the requested size, and that is compatible with the provided alignment constraint. Furthermore, for any two segments <code>S1, S2 </code> returned by this method, the following invariant must hold:<div class="snippet-container"> <button class="copy snippet-copy"><span data-copied="Copied!">Copy</span><img src="../../../../copy.svg" alt="Copy"/></button><pre class="snippet">
                                                                <code class="language-java"> S1.overlappingSlice(S2).isEmpty() == true
</code>
                                                            </pre> </div>                                     </dd> <dt>Parameters:</dt><dd> <code>byteSize</code> - the size (in bytes) of the off-heap memory block backing the native memory segment.                </dd><dd> <code>byteAlignment</code> - the alignment constraint (in bytes) of the off-heap region of memory backing the native memory segment.                  </dd> <dt>Returns:</dt><dd>a new native memory segment.    </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalArgumentException.html" title="class in java.lang">IllegalArgumentException</a></code> - if <code>bytesSize &lt; 0  </code>, <code>alignmentBytes &lt;= 0  </code>, or if <code>alignmentBytes</code> is not a power of 2.              </dd><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if this arena has already been <a href="#close()">closed</a>.         </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang">WrongThreadException</a></code> - if this arena is confined, and this method is called from a thread <code>T</code> other than the arena owner thread.                      </dd>     </dl>  </section> <a end_ctx_id="method:allocate(long,long)"/>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:scope() [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:scope()"/> <section class="detail" id="scope()"><h3>scope</h3><div class="member-signature"> <span class="return-type"><a href="MemorySegment.Scope.html" title="interface in java.lang.foreign"><a href="SegmentScope.html" title="interface in java.lang.foreign" changeType="diff-removed-tag"><span class="diff-html-removed">SegmentScope</span></a><span class="diff-html-added">MemorySegment.Scope</span></a><sup><a href="MemorySegment.Scope.html#preview-java.lang.foreign.MemorySegment.Scope">PREVIEW</a></sup></span> <span class="element-name">scope</span>() </div><div class="block">Returns the arena scope.   </div><dl class="notes"> <dt>Returns:</dt><dd>the arena scope  </dd> </dl>  </section> <a end_ctx_id="method:scope()"/>   </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:scope()"/> <section class="detail" id="scope()"><h3>scope</h3><div class="member-signature"> <span class="return-type"><a href="SegmentScope.html" title="interface in java.lang.foreign" changeType="diff-removed-tag">SegmentScope</a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup></span> <span class="element-name">scope</span>() </div><div class="block">Returns the arena scope.   </div><dl class="notes"> <dt>Returns:</dt><dd>the arena scope  </dd> </dl>  </section> <a end_ctx_id="method:scope()"/>   </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:scope()"/> <section class="detail" id="scope()"><h3>scope</h3><div class="member-signature"> <span class="return-type"><a href="MemorySegment.Scope.html" title="interface in java.lang.foreign">MemorySegment.Scope</a><sup><a href="MemorySegment.Scope.html#preview-java.lang.foreign.MemorySegment.Scope">PREVIEW</a></sup></span> <span class="element-name">scope</span>() </div><div class="block">Returns the arena scope.   </div><dl class="notes"> <dt>Returns:</dt><dd>the arena scope  </dd> </dl>  </section> <a end_ctx_id="method:scope()"/>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:close() [CHANGED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#EEEEEE" colspan="2"> <a start_ctx_id="method:close()"/> <section class="detail" id="close()"><h3>close</h3><div class="member-signature"> <span class="return-type">void</span> <span class="element-name">close</span>() </div><div class="block"> Closes this arena. If this method completes normally, the arena scope is no longer <a href="MemorySegment.Scope.html#isAlive()">alive</a><sup><a href="MemorySegment.Scope.html#preview-java.lang.foreign.MemorySegment.Scope">PREVIEW</a></sup>, and all the memory segments associated with it can no longer be accessed. Furthermore, any off-heap region of memory backing the segments <span class="diff-html-removed">associated</span> <span class="diff-html-removed">with</span> <span class="diff-html-removed">that</span> <span class="diff-html-removed">scope</span><span class="diff-html-added">obtained</span> <span class="diff-html-added">from</span> <span class="diff-html-added">this</span> <span class="diff-html-added">arena</span> are also released.                                               </div><dl class="notes"> <dt>Specified by: </dt><dd> <code><a href="../AutoCloseable.html#close()">close</a></code> in interface <code><a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt>API Note: </dt><dd> This operation is not idempotent; that is, closing an already closed arena <em>always</em> results in an exception being thrown. This reflects a deliberate design choice: failure to close an arena might reveal a bug in the underlying application logic.                                       </dd> <dt><span class="diff-html-added">Implementation</span> <span class="diff-html-added">Requirements:</span> </dt><dd> <span class="diff-html-added">If</span> <span class="diff-html-added">this</span> <span class="diff-html-added">method</span> <span class="diff-html-added">completes</span> <span class="diff-html-added">normally,</span> <span class="diff-html-added">then</span> <code><span class="diff-html-added">this.scope().isAlive()</span> <span class="diff-html-added">==</span> <span class="diff-html-added">false</span>  </code><span class="diff-html-added">.</span> <span class="diff-html-added">Implementations</span> <span class="diff-html-added">are</span> <span class="diff-html-added">allowed</span> <span class="diff-html-added">to</span> <span class="diff-html-added">throw</span> <a href="../UnsupportedOperationException.html" title="class in java.lang"><code><span class="diff-html-added">UnsupportedOperationException</span></code></a> <span class="diff-html-added">if</span> <span class="diff-html-added">an</span> <span class="diff-html-added">explicit</span> <span class="diff-html-added">close</span> <span class="diff-html-added">operation</span> <span class="diff-html-added">is</span> <span class="diff-html-added">not</span> <span class="diff-html-added">supported.</span>                     </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the arena has already been closed.         </dd><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if <span class="diff-html-removed">the</span><span class="diff-html-added">a</span> <span class="diff-html-added">segment</span> <span class="diff-html-added">associated</span> <span class="diff-html-added">with</span> <span class="diff-html-added">this</span> arena <span class="diff-html-removed">scope</span>is <a href="SegmentScope.html#whileAlive(java.lang.Runnable)" changeType="diff-removed-tag"><span class="diff-html-removed">kept</span> <span class="diff-html-removed">alive</span> </a><span class="diff-html-added">being</span> <span class="diff-html-added">accessed</span> <span class="diff-html-added">concurrently,</span> <span class="diff-html-added">e.g.</span> <span class="diff-html-added">by</span> <span class="diff-html-added">a</span> <a href="Linker.html#downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)"><span class="diff-html-added">downcall</span> <span class="diff-html-added">method</span> <span class="diff-html-added">handle</span>  </a><sup><a href="Linker.html#preview-java.lang.foreign.Linker">PREVIEW</a></sup>.                 </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang">WrongThreadException</a></code> - if <span class="diff-html-added">this</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">is</span> <span class="diff-html-added">confined,</span> <span class="diff-html-added">and</span> this method is called from a thread <code>T</code> <span class="diff-html-removed">,</span> <span class="diff-html-removed">such</span> <span class="diff-html-removed">that</span> <code changeType="diff-removed-tag"><span class="diff-html-removed">isCloseableBy(T)</span> <span class="diff-html-removed">==</span> <span class="diff-html-removed">false</span>  </code><span class="diff-html-added">other</span> <span class="diff-html-added">than</span> <span class="diff-html-added">the</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">owner</span> <span class="diff-html-added">thread.</span>                         </dd><dd> <code><a href="../UnsupportedOperationException.html" title="class in java.lang"><span class="diff-html-added">UnsupportedOperationException</span></a></code> <span class="diff-html-added">-</span> <span class="diff-html-added">if</span> <span class="diff-html-added">this</span> <span class="diff-html-added">arena</span> <span class="diff-html-added">does</span> <span class="diff-html-added">not</span> <span class="diff-html-added">support</span> <span class="diff-html-added">explicit</span> <span class="diff-html-added">closure</span>.          </dd> <dt>See Also: </dt><dd><ul class="tag-list-long"><li> <a href="MemorySegment.Scope.html#isAlive()"><code><span class="diff-html-removed">SegmentScope</span><span class="diff-html-added">MemorySegment.Scope</span>.isAlive()</code></a><sup><a href="MemorySegment.Scope.html#preview-java.lang.foreign.MemorySegment.Scope">PREVIEW</a></sup> </li></ul></dd>     </dl>  </section>   <a end_ctx_id="method:close()"/>     </td></tr><tr valign="top"><td bgcolor="#CCCCCC" colspan="1"> <a start_ctx_id="method:close()"/> <section class="detail" id="close()"><h3>close</h3><div class="member-signature"> <span class="return-type">void</span> <span class="element-name">close</span>() </div><div class="block"> Closes this arena. If this method completes normally, the arena scope is no longer <a href="SegmentScope.html#isAlive()">alive</a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup>, and all the memory segments associated with it can no longer be accessed. Furthermore, any off-heap region of memory backing the segments associated with that scope are also released.                                            </div><dl class="notes"> <dt>Specified by: </dt><dd> <code><a href="../AutoCloseable.html#close()">close</a></code> in interface <code><a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt>API Note: </dt><dd> This operation is not idempotent; that is, closing an already closed arena <em>always</em> results in an exception being thrown. This reflects a deliberate design choice: failure to close an arena might reveal a bug in the underlying application logic.                                       </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the arena has already been closed.         </dd><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the arena scope is <a href="SegmentScope.html#whileAlive(java.lang.Runnable)" changeType="diff-removed-tag">kept alive </a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup>.        </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang">WrongThreadException</a></code> - if this method is called from a thread <code>T</code>, such that <code changeType="diff-removed-tag">isCloseableBy(T) == false  </code>.              </dd> <dt>See Also: </dt><dd><ul class="tag-list"><li> <a href="SegmentScope.html#isAlive()"><code>SegmentScope.isAlive()</code></a><sup><a href="SegmentScope.html#preview-java.lang.foreign.SegmentScope">PREVIEW</a></sup> </li></ul></dd>    </dl>  </section> <a end_ctx_id="method:close()"/>   </td><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:close()"/> <section class="detail" id="close()"><h3>close</h3><div class="member-signature"> <span class="return-type">void</span> <span class="element-name">close</span>() </div><div class="block"> Closes this arena. If this method completes normally, the arena scope is no longer <a href="MemorySegment.Scope.html#isAlive()">alive</a><sup><a href="MemorySegment.Scope.html#preview-java.lang.foreign.MemorySegment.Scope">PREVIEW</a></sup>, and all the memory segments associated with it can no longer be accessed. Furthermore, any off-heap region of memory backing the segments obtained from this arena are also released.                                            </div><dl class="notes"> <dt>Specified by: </dt><dd> <code><a href="../AutoCloseable.html#close()">close</a></code> in interface <code><a href="../AutoCloseable.html" title="interface in java.lang">AutoCloseable</a></code>  </dd> <dt>API Note: </dt><dd> This operation is not idempotent; that is, closing an already closed arena <em>always</em> results in an exception being thrown. This reflects a deliberate design choice: failure to close an arena might reveal a bug in the underlying application logic.                                       </dd> <dt>Implementation Requirements: </dt><dd> If this method completes normally, then <code>this.scope().isAlive() == false  </code>. Implementations are allowed to throw <a href="../UnsupportedOperationException.html" title="class in java.lang"><code>UnsupportedOperationException</code></a> if an explicit close operation is not supported.                     </dd> <dt>Throws:</dt><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if the arena has already been closed.         </dd><dd> <code><a href="../IllegalStateException.html" title="class in java.lang">IllegalStateException</a></code> - if a segment associated with this arena is being accessed concurrently, e.g. by a <a href="Linker.html#downcallHandle(java.lang.foreign.FunctionDescriptor,java.lang.foreign.Linker.Option...)">downcall method handle  </a><sup><a href="Linker.html#preview-java.lang.foreign.Linker">PREVIEW</a></sup>.                 </dd><dd> <code><a href="../WrongThreadException.html" title="class in java.lang">WrongThreadException</a></code> - if this arena is confined, and this method is called from a thread <code>T</code> other than the arena owner thread.                      </dd><dd> <code><a href="../UnsupportedOperationException.html" title="class in java.lang">UnsupportedOperationException</a></code> - if this arena does not support explicit closure.          </dd> <dt>See Also: </dt><dd><ul class="tag-list-long"><li> <a href="MemorySegment.Scope.html#isAlive()"><code>MemorySegment.Scope.isAlive()</code></a><sup><a href="MemorySegment.Scope.html#preview-java.lang.foreign.MemorySegment.Scope">PREVIEW</a></sup> </li></ul></dd>     </dl>  </section>   <a end_ctx_id="method:close()"/>     </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:isCloseableBy(java.lang.Thread) [REMOVED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:isCloseableBy(java.lang.Thread)" changeType="diff-removed-tag"><span class="diff-html-removed"/></a> <section class="detail" id="isCloseableBy(java.lang.Thread)" changeType="diff-removed-tag"><h3><span class="diff-html-removed">isCloseableBy</span></h3><div class="member-signature"> <span class="return-type"><span class="diff-html-removed">boolean</span></span><span class="diff-html-removed"> </span><span class="element-name"><span class="diff-html-removed">isCloseableBy</span></span> <wbr><span class="diff-html-removed"/></wbr> <span class="parameters"><span class="diff-html-removed">(</span><a href="../Thread.html" title="class in java.lang"><span class="diff-html-removed">Thread</span></a><span class="diff-html-removed"> thread)</span></span>   </div><div class="block"> <span class="diff-html-removed">Returns</span> <code><span class="diff-html-removed">true</span></code> <span class="diff-html-removed">if</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">provided</span> <span class="diff-html-removed">thread</span> <span class="diff-html-removed">can</span> <span class="diff-html-removed">close</span> <span class="diff-html-removed">this</span> <span class="diff-html-removed">arena.</span>          </div><dl class="notes"> <dt><span class="diff-html-removed">Parameters:</span></dt><dd> <code><span class="diff-html-removed">thread</span></code> <span class="diff-html-removed">-</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">thread</span> <span class="diff-html-removed">to</span> <span class="diff-html-removed">be</span> <span class="diff-html-removed">tested.</span>       </dd> <dt><span class="diff-html-removed">Returns:</span></dt><dd> <code><span class="diff-html-removed">true</span></code> <span class="diff-html-removed">if</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">provided</span> <span class="diff-html-removed">thread</span> <span class="diff-html-removed">can</span> <span class="diff-html-removed">close</span> <span class="diff-html-removed">this</span> <span class="diff-html-removed">arena</span>         </dd>  </dl> <span class="diff-html-removed"/> </section> <a end_ctx_id="method:isCloseableBy(java.lang.Thread)" changeType="diff-removed-tag"><span class="diff-html-removed"/></a>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:openConfined() [REMOVED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:openConfined()" changeType="diff-removed-tag"><span class="diff-html-removed"/></a> <section class="detail" id="openConfined()" changeType="diff-removed-tag"><h3><span class="diff-html-removed">openConfined</span></h3><div class="member-signature"> <span class="modifiers"><span class="diff-html-removed">static</span></span><span class="diff-html-removed"> </span><span class="return-type"><a href="Arena.html" title="interface in java.lang.foreign"><span class="diff-html-removed">Arena</span></a><sup><a href="#preview-java.lang.foreign.Arena"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-removed"/></span><span class="diff-html-removed"> </span><span class="element-name"><span class="diff-html-removed">openConfined</span></span><span class="diff-html-removed">()</span> </div><div class="block"><span class="diff-html-removed">Returns</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">new</span> <span class="diff-html-removed">confined</span> <span class="diff-html-removed">arena,</span> <span class="diff-html-removed">owned</span> <span class="diff-html-removed">by</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">current</span> <span class="diff-html-removed">thread.</span>         </div><dl class="notes"> <dt><span class="diff-html-removed">Returns:</span></dt><dd><span class="diff-html-removed">a</span> <span class="diff-html-removed">new</span> <span class="diff-html-removed">confined</span> <span class="diff-html-removed">arena,</span> <span class="diff-html-removed">owned</span> <span class="diff-html-removed">by</span> <span class="diff-html-removed">the</span> <span class="diff-html-removed">current</span> <span class="diff-html-removed">thread</span>        </dd> </dl> <span class="diff-html-removed"/> </section> <a end_ctx_id="method:openConfined()" changeType="diff-removed-tag"><span class="diff-html-removed"/></a>   </td></tr></table></td></tr></table><table border="0" cellpadding="1" cellspacing="0" width="100%"><tr><td><h3 class="ctxid">method:openShared() [REMOVED]</h3></td></tr><tr><td><table border="0" cellpadding="5" cellspacing="1" bgcolor="black" width="100%"><tr valign="top"><td bgcolor="#FFFFFF" colspan="1"> <a start_ctx_id="method:openShared()" changeType="diff-removed-tag"><span class="diff-html-removed"/></a> <section class="detail" id="openShared()" changeType="diff-removed-tag"><h3><span class="diff-html-removed">openShared</span></h3><div class="member-signature"> <span class="modifiers"><span class="diff-html-removed">static</span></span><span class="diff-html-removed"> </span><span class="return-type"><a href="Arena.html" title="interface in java.lang.foreign"><span class="diff-html-removed">Arena</span></a><sup><a href="#preview-java.lang.foreign.Arena"><span class="diff-html-removed">PREVIEW</span></a><span class="diff-html-removed"/></sup><span class="diff-html-removed"/></span><span class="diff-html-removed"> </span><span class="element-name"><span class="diff-html-removed">openShared</span></span><span class="diff-html-removed">()</span> </div><div class="block"><span class="diff-html-removed">Returns</span> <span class="diff-html-removed">a</span> <span class="diff-html-removed">new</span> <span class="diff-html-removed">shared</span> <span class="diff-html-removed">arena.</span>    </div><dl class="notes"> <dt><span class="diff-html-removed">Returns:</span></dt><dd><span class="diff-html-removed">a</span> <span class="diff-html-removed">new</span> <span class="diff-html-removed">shared</span> <span class="diff-html-removed">arena</span>   </dd> </dl> <span class="diff-html-removed"/> </section> <span class="diff-html-removed"/> <span class="diff-html-removed"/> <a end_ctx_id="method:openShared()" changeType="diff-removed-tag"><span class="diff-html-removed"/></a>     </td></tr></table></td></tr></table></diff></diffreport>